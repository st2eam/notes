import{_ as a,c as i,a2 as t,o as e}from"./chunks/framework.BW-ZVgUE.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Python/python基础/pythonOS模块.md","filePath":"Python/python基础/pythonOS模块.md"}'),h={name:"Python/python基础/pythonOS模块.md"};function p(n,s,o,l,d,r){return e(),i("div",null,s[0]||(s[0]=[t(`<h2 id="python-os-模块" tabindex="-1">Python OS 模块 <a class="header-anchor" href="#python-os-模块" aria-label="Permalink to &quot;Python OS 模块&quot;">​</a></h2><p><code>os</code>就是“operating system”的缩写，顾名思义，<code>os</code>模块提供的就是各种 Python 程序与操作系统进行交互的接口。</p><p>通过使用<code>os</code>模块，一方面可以方便地与操作系统进行交互，另一方面页可以极大增强代码的可移植性。如果该模块中相关功能出错，会抛出<code>OSError</code>异常或其子类异常。</p><h2 id="常用功能" tabindex="-1">常用功能 <a class="header-anchor" href="#常用功能" aria-label="Permalink to &quot;常用功能&quot;">​</a></h2><h3 id="os-access" tabindex="-1">os.access() <a class="header-anchor" href="#os-access" aria-label="Permalink to &quot;os.access()&quot;">​</a></h3><p>os.access() 方法使用当前的uid/gid尝试访问路径。大部分操作使用有效的 uid/gid, 因此运行环境可以在 suid/sgid 环境尝试。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abspath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys.argv[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;F_OK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.access(abspath, os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">F_OK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># F_OK True</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;R_OK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.access(abspath, os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">R_OK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># R_OK True</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;W_OK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.access(abspath, os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">W_OK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># W_OK True</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X_OK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, os.access(abspath, os.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">X_OK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># X_OK True</span></span></code></pre></div><h3 id="os-name" tabindex="-1">os.name <a class="header-anchor" href="#os-name" aria-label="Permalink to &quot;os.name&quot;">​</a></h3><p>该属性宽泛地指明了当前 Python 运行所在的环境，实际上是导入的操作系统相关模块的名称。</p><h3 id="os-chdir" tabindex="-1">os.chdir() <a class="header-anchor" href="#os-chdir" aria-label="Permalink to &quot;os.chdir()&quot;">​</a></h3><p>“chdir”其实是“change the directory”的简写，因此<code>os.chdir()</code>的用处实际上是切换当前工作路径为指定路径。其中“指定路径”需要作为参数传入函数<code>os.chdir()</code>，该参数既可以是文本或字节型字符串，也可以是一个文件描述符，还可以是一个广义的类路径（path-like）对象。若指定路径不存在，则会抛出<code>FileNotFoundError</code>异常。</p><h3 id="os-environ" tabindex="-1">os.environ <a class="header-anchor" href="#os-environ" aria-label="Permalink to &quot;os.environ&quot;">​</a></h3><p><code>os.environ</code>属性可以返回环境相关的信息，主要是各类环境变量。</p><p>返回值是一个映射（类似字典类型），具体的值为第一次导入<code>os</code>模块时的快照；其中的各个键值对，键是环境变量名，值则是环境变量对应的值。</p><p>在第一次导入<code>os</code>模块之后，除非直接修改<code>os.environ</code>的值，否则该属性的值不再发生变化。</p><h3 id="os-walk" tabindex="-1">os.walk() <a class="header-anchor" href="#os-walk" aria-label="Permalink to &quot;os.walk()&quot;">​</a></h3><p>这个函数需要传入一个路径作为<code>top</code>参数，函数的作用是在以<code>top</code>为根节点的目录树中游走，对树中的每个目录生成一个由<code>(dirpath, dirnames, filenames)</code>三项组成的三元组。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.walk(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span></code></pre></div><h3 id="os-listdir" tabindex="-1">os.listdir() <a class="header-anchor" href="#os-listdir" aria-label="Permalink to &quot;os.listdir()&quot;">​</a></h3><p>“listdir”即“list directories”，列出（当前）目录下的全部路径（及文件）。该函数存在一个参数，用以指定要列出子目录的路径，默认为<code>“.”</code>，即“当前路径”。</p><p>函数返回值是一个列表，其中各元素均为字符串，分别是各路径名和文件名。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.listdir())</span></span></code></pre></div><h3 id="os-mkdir" tabindex="-1">os.mkdir() <a class="header-anchor" href="#os-mkdir" aria-label="Permalink to &quot;os.mkdir()&quot;">​</a></h3><p>“mkdir”，即“make directory”，用处是“新建一个路径”。需要传入一个类路径参数用以指定新建路径的位置和名称，如果指定路径已存在，则会抛出<code>FileExistsError</code>异常。</p><p>该函数只能在已有的路径下新建一级路径，否则（即新建多级路径）会抛出<code>FileNotFoundError</code>异常。</p><p>相应地，在需要新建多级路径的场景下，可以使用<code>os.makedirs()</code>来完成任务。函数<code>os.makedirs()</code>执行的是递归创建，若有必要，会分别新建指定路径经过的中间路径，直到最后创建出末端的“叶子路径”。</p><h3 id="os-remove" tabindex="-1">os.remove() <a class="header-anchor" href="#os-remove" aria-label="Permalink to &quot;os.remove()&quot;">​</a></h3><p>用于删除文件，如果指定路径是目录而非文件的话，就会抛出<code>IsADirectoryError</code>异常。删除目录应该使用<code>os.rmdir()</code>函数。</p><p>同样的，对应于<code>os.makedirs()</code>，删除路径操作<code>os.rmdir()</code>也有一个递归删除的函数<code>os.removedirs()</code>，该函数会尝试从最下级目录开始，逐级删除指定的路径，几乎就是一个<code>os.makedirs()</code>的逆过程；一旦遇到非空目录即停止。</p><h3 id="os-rename" tabindex="-1">os.rename() <a class="header-anchor" href="#os-rename" aria-label="Permalink to &quot;os.rename()&quot;">​</a></h3><p>该函数的作用是将文件或路径重命名，一般调用格式为<code>os.rename(src, dst)</code>，即将<code>src</code>指向的文件或路径重命名为<code>dst</code>指定的名称。</p><p>注意，如果指定的目标路径在其他目录下，该函数还可实现文件或路径的“剪切并粘贴”功能。但无论直接原地重命名还是“剪切粘贴”，中间路径都必须要存在，否则就会抛出<code>FileNotFoundError</code>异常。如果目标路径已存在，Windows 下会抛出<code>FileExistsError</code>异常；Linux 下，如果目标路径为空且用户权限允许，则会静默覆盖原路径，否则抛出<code>OSError</code>异常，</p><p>和上两个函数一样，该函数也有对应的递归版本<code>os.renames()</code>，能够创建缺失的中间路径。</p><p>注意，这两种情况下，如果函数执行成功，都会调用<code>os.removedir()</code>函数来递归删除源路径的最下级目录。</p><h3 id="os-getcwd" tabindex="-1">os.getcwd() <a class="header-anchor" href="#os-getcwd" aria-label="Permalink to &quot;os.getcwd()&quot;">​</a></h3><p>“getcwd”实际上是“get the current working directory”的简写，顾名思义，也就是说这个函数的作用是“获取当前工作路径”。在程序运行的过程中，无论物理上程序在实际存储空间的什么地方，“当前工作路径”即可认为是程序所在路径；与之相关的“相对路径”、“同目录下模块导入”等相关的操作均以“当前工作路径”为准。</p><p>在交互式环境中，返回的就是交互终端打开的位置；而在 Python 文件中，返回的则是文件所在的位置。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.getcwd())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># d:\\DeskTop\\project\\2022_11</span></span></code></pre></div><h2 id="os-path-模块" tabindex="-1">os.path 模块 <a class="header-anchor" href="#os-path-模块" aria-label="Permalink to &quot;os.path 模块&quot;">​</a></h2><p>使用该模块要注意一个很重要的特性：<code>os.path</code>中的函数基本上是纯粹的字符串操作。换句话说，传入该模块函数的参数甚至不需要是一个有效路径，该模块也不会试图访问这个路径，而仅仅是按照“路径”的通用格式对字符串进行处理。</p><p>更进一步地说，<code>os.path</code>模块的功能我们都可以自己使用字符串操作手动实现，该模块的作用是让我们在实现相同功能的时候不必考虑具体的系统，尤其是不需要过多关注文件系统分隔符的问题。</p><h3 id="os-path-getsize-path" tabindex="-1">os.path.getsize(path) <a class="header-anchor" href="#os-path-getsize-path" aria-label="Permalink to &quot;os.path.getsize(path)&quot;">​</a></h3><p>返回 path 的大小，以字节为单位，若 path 是目录则返回 0。</p><h3 id="os-path-abspath-path" tabindex="-1">os.path.abspath(path) <a class="header-anchor" href="#os-path-abspath-path" aria-label="Permalink to &quot;os.path.abspath(path)&quot;">​</a></h3><p>将传入路径规范化，返回一个相应的绝对路径格式的字符串。</p><p>也就是说当传入路径符合“绝对路径”的格式时，该函数仅仅将路径分隔符替换为适应当前系统的字符，不做其他任何操作，并将结果返回。所谓“绝对路径的格式”，其实指的就是一个字母加冒号，之后跟分隔符和字符串序列的格式：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.path.abspath(os.listdir()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># d:\\DeskTop\\project\\2022_11\\learn.py</span></span></code></pre></div><h3 id="os-path-basename-path" tabindex="-1">os.path.basename(path) <a class="header-anchor" href="#os-path-basename-path" aria-label="Permalink to &quot;os.path.basename(path)&quot;">​</a></h3><p><code>os.path.basename()</code>该函数返回传入路径的“基名”，即文件名。</p><h3 id="os-path-dirname-path" tabindex="-1">os.path.dirname(path) <a class="header-anchor" href="#os-path-dirname-path" aria-label="Permalink to &quot;os.path.dirname(path)&quot;">​</a></h3><p><code>os.path.dirname()</code>返回文件路径</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abspath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.path.abspath(os.listdir()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.path.dirname(abspath))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.path.basename(abspath))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># d:\\DeskTop\\project\\2022_11</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># learn.py</span></span></code></pre></div><h3 id="os-path-join-path-paths" tabindex="-1">os.path.join(path, *paths) <a class="header-anchor" href="#os-path-join-path-paths" aria-label="Permalink to &quot;os.path.join(path, *paths)&quot;">​</a></h3><p>把目录和文件名合成一个路径</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abspath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.path.abspath(os.listdir()[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dirname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.path.dirname(abspath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">basename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os.path.basename(abspath)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.path.join(dirname, basename))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># d:\\DeskTop\\project\\2022_11\\learn.py</span></span></code></pre></div><p>但如果传入路径中存在一个“绝对路径”格式的字符串，且这个字符串不是函数的第一个参数，那么其他在这个参数之前的所有参数都会被丢弃，余下的参数再进行组合。</p><p>换句话说，只有最后一个“绝对路径”及其之后的参数才会体现在返回结果中。</p><h3 id="os-path-exists-path" tabindex="-1">os.path.exists(path) <a class="header-anchor" href="#os-path-exists-path" aria-label="Permalink to &quot;os.path.exists(path)&quot;">​</a></h3><p>这个函数用于判断路径所指向的位置是否存在。若存在则返回<code>True</code>，不存在则返回<code>False</code>。 一般的用法是在需要持久化保存某些数据的场景，为避免重复创建某个文件，需要在写入前用该函数检测一下相应文件是否存在，若不存在则新建，若存在则在文件内容之后增加新的内容。</p><h3 id="os-path-isabs-path" tabindex="-1">os.path.isabs(path) <a class="header-anchor" href="#os-path-isabs-path" aria-label="Permalink to &quot;os.path.isabs(path)&quot;">​</a></h3><p>该函数判断传入路径是否是绝对路径，若是则返回<code>True</code>，否则返回<code>False</code>。当然，仅仅是检测格式，同样不对其有效性进行任何核验</p><h3 id="os-path-isfile-path" tabindex="-1">os.path.isfile(path) <a class="header-anchor" href="#os-path-isfile-path" aria-label="Permalink to &quot;os.path.isfile(path)&quot;">​</a></h3><p>判断路径是否为文件</p><h3 id="os-path-isdir-path" tabindex="-1">os.path.isdir(path) <a class="header-anchor" href="#os-path-isdir-path" aria-label="Permalink to &quot;os.path.isdir(path)&quot;">​</a></h3><p>判断路径是否为目录</p><h3 id="os-system-command" tabindex="-1">os.system(command) <a class="header-anchor" href="#os-system-command" aria-label="Permalink to &quot;os.system(command)&quot;">​</a></h3><p>调用 shell 脚本。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.system(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ipconfig&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div>`,68)]))}const E=a(h,[["render",p]]);export{c as __pageData,E as default};
