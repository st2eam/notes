import{_ as n,E as h,c as l,J as k,w as t,m as s,a as i,a4 as p,o as e}from"./chunks/framework.B-C7vMfR.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Design Patterns/迭代器模式.md","filePath":"Design Patterns/迭代器模式.md"}'),E={name:"Design Patterns/迭代器模式.md"},r=s("h2",{id:"迭代器模式-iterator-pattern",tabindex:"-1"},[i("迭代器模式（Iterator Pattern） "),s("a",{class:"header-anchor",href:"#迭代器模式-iterator-pattern","aria-label":'Permalink to "迭代器模式（Iterator Pattern）"'},"​")],-1),d=s("p",null,"迭代器模式是一种行为设计模式， 让你能在不暴露集合底层表现形式 （列表、 栈和树等） 的情况下遍历集合中所有的元素。",-1),g=s("h3",{id:"迭代器模式结构",tabindex:"-1"},[i("迭代器模式结构 "),s("a",{class:"header-anchor",href:"#迭代器模式结构","aria-label":'Permalink to "迭代器模式结构"'},"​")],-1),y=s("img",{src:"https://refactoringguru.cn/images/patterns/diagrams/iterator/structure-indexed.png"},null,-1),F=p("",9);function c(o,C,B,A,D,m){const a=h("center");return e(),l("div",null,[r,d,g,k(a,null,{default:t(()=>[y]),_:1}),F])}const _=n(E,[["render",c]]);export{v as __pageData,_ as default};
