import{_ as i,E as n,c as e,J as t,w as l,m as s,a as p,a4 as r,o as h}from"./chunks/framework.BtaI5osv.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Design Patterns/享元模式.md","filePath":"Design Patterns/享元模式.md"}'),k={name:"Design Patterns/享元模式.md"},c=s("h2",{id:"享元模式-flyweight-pattern",tabindex:"-1"},[p("享元模式（Flyweight Pattern） "),s("a",{class:"header-anchor",href:"#享元模式-flyweight-pattern","aria-label":'Permalink to "享元模式（Flyweight Pattern）"'},"​")],-1),o=s("p",null,"享元模式是一种结构型设计模式， 它摒弃了在每个对象中保存所有数据的方式， 通过共享多个对象所共有的相同状态， 让你能在有限的内存容量中载入更多对象。",-1),E=s("p",null,"说到享元模式，第一个想到的应该就是池技术了，String常量池、数据库连接池、缓冲池等等都是享元模式的应用，所以说享元模式是池技术的重要实现方式。",-1),g=s("p",null,"比如我们每次创建字符串对象时，都需要创建一个新的字符串对象的话，内存开销会很大，所以如果第一次创建了字符串对象“stream“，下次再创建相同的字符串”stream“时，只是把它的引用指向”stream“，这样就实现了”stream“字符串再内存中的共享。",-1),d=s("p",null,"举个最简单的例子，网络联机下棋的时候，一台服务器连接了多个客户端（玩家），如果我们每个棋子都要创建对象，那一盘棋可能就有上百个对象产生，玩家多点的话，因为内存空间有限，一台服务器就难以支持了，所以这里要使用享元模式，将棋子对象减少到几个实例。下面给出享元模式的定义。",-1),y=s("img",{src:"https://refactoringguru.cn/images/patterns/content/flyweight/flyweight-zh.png?id=3454f49363769767c6ff3500cf9f4889"},null,-1),m=r(`<h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p><strong>意图</strong>：运用共享技术有效地支持大量细粒度的对象。</p><p><strong>主要解决</strong>：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p><p><strong>何时使用</strong>：</p><ol><li>系统中有大量对象。</li><li>这些对象消耗大量内存。</li><li>这些对象的状态大部分可以外部化。</li><li>这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。</li><li>系统不依赖于这些对象身份，这些对象是不可分辨的。</li></ol><p><strong>如何解决</strong>：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p><p><strong>关键代码</strong>：用 HashMap 存储这些对象。</p><p><strong>应用实例</strong>：</p><ol><li>JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。</li><li>数据库的数据池。</li></ol><p><strong>优点</strong>：大大减少对象的创建，降低系统的内存，使效率提高。</p><p><strong>缺点</strong>：提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p><p><strong>使用场景</strong>： 1、系统有大量相似对象。 2、需要缓冲池的场景。</p><p><strong>注意事项</strong>： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</p><h3 id="享元模式结构" tabindex="-1">享元模式结构 <a class="header-anchor" href="#享元模式结构" aria-label="Permalink to &quot;享元模式结构&quot;">​</a></h3><p><img src="https://refactoringguru.cn/images/patterns/diagrams/flyweight/structure-indexed.png" alt="image"></p><ol><li><p>享元模式只是一种优化。 在应用该模式之前， 你要确定程序中存在与大量类似对象同时占用内存相关的内存消耗问题， 并且确保该问题无法使用其他更好的方式来解决。</p></li><li><p><strong>享元</strong> （Flyweight） 类包含原始对象中部分能在多个对象中共享的状态。 同一享元对象可在许多不同情景中使用。 享元中存储的状态被称为 “内在状态”。 传递给享元方法的状态被称为 “外在状态”。</p></li><li><p><strong>情景</strong> （Context） 类包含原始对象中各不相同的外在状态。 情景与享元对象组合在一起就能表示原始对象的全部状态。</p></li><li><p>通常情况下， 原始对象的行为会保留在享元类中。 因此调用享元方法必须提供部分外在状态作为参数。 但你也可将行为移动到情景类中， 然后将连入的享元作为单纯的数据对象。</p></li><li><p><strong>客户端</strong> （Client） 负责计算或存储享元的外在状态。 在客户端看来， 享元是一种可在运行时进行配置的模板对象， 具体的配置方式为向其方法中传入一些情景数据参数。</p></li><li><p><strong>享元工厂</strong> （Flyweight Factory） 会对已有享元的缓存池进行管理。 有了工厂后， 客户端就无需直接创建享元， 它们只需调用工厂并向其传递目标享元的一些内在状态即可。 工厂会根据参数在之前已创建的享元中进行查找， 如果找到满足条件的享元就将其返回； 如果没有找到就根据参数新建享元。</p></li></ol><h3 id="概念示例" tabindex="-1">概念示例 <a class="header-anchor" href="#概念示例" aria-label="Permalink to &quot;概念示例&quot;">​</a></h3><p>在本例中， 享元模式能有效减少在画布上渲染数百万个树状对象时所需的内存。 <img src="https://refactoringguru.cn/images/patterns/diagrams/flyweight/example.png" alt="image"> 该模式从主要的 树Tree类中抽取内在状态， 并将其移动到享元类 树种类Tree­Type之中。</p><p>最初程序需要在多个对象中存储相同数据， 而现在仅需在几个享元对象中保存数据， 然后在作为情景的 树对象中连入享元即可。 客户端代码使用享元工厂创建树对象并封装搜索指定对象的复杂行为， 并能在需要时复用对象。</p><div class="language-c# vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c#</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 享元类包含一个树的部分状态。这些成员变量保存的数值对于特定树而言是唯一</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 的。例如，你在这里找不到树的坐标。但这里有很多树木之间所共有的纹理和颜</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 色。由于这些数据的体积通常非常大，所以如果让每棵树都其进行保存的话将耗</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 费大量内存。因此，我们可将纹理、颜色和其他重复数据导出到一个单独的对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 中，然后让众多的单个树对象去引用它。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TreeType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    field name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    field color</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    field texture</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    constructor TreeType(name, color, texture) { ... }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    method</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(canvas, x, y) is</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 1. 创建特定类型、颜色和纹理的位图。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 2. 在画布坐标 (X,Y) 处绘制位图。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 享元工厂决定是否复用已有享元或者创建一个新的对象。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class TreeFactory is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    static field treeTypes: collection of tree types</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    static method getTreeType(name, color, texture) is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type = treeTypes.find(name, color, texture)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        if (type == null)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            type = new TreeType(name, color, texture)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            treeTypes.add(type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        return type</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 情景对象包含树状态的外在部分。程序中可以创建数十亿个此类对象，因为它们</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 体积很小：仅有两个整型坐标和一个引用成员变量。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class Tree is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    field x,y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    field type: TreeType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    constructor Tree(x, y, type) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    method</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(canvas) is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type.draw(canvas, this.x, this.y)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 树（Tree）和森林（Forest）类是享元的客户端。如果不打算继续对树类进行开</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发，你可以将它们合并。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">class Forest is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    field trees: collection of Trees</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method plantTree(x, y, name, color, texture) is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        type = TreeFactory.getTreeType(name, color, texture)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tree = new Tree(x, y, type)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        trees.add(tree)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    method draw(canvas) is</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        foreach (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tree</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> trees) do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            tree.draw(canvas)</span></span></code></pre></div>`,20);function _(u,f,T,A,D,x){const a=n("center");return h(),e("div",null,[c,o,E,g,d,t(a,null,{default:l(()=>[y]),_:1}),m])}const C=i(k,[["render",_]]);export{w as __pageData,C as default};
