import{_ as a,c as i,o as e,a4 as s}from"./chunks/framework.B-C7vMfR.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/JS 正则表达式.md","filePath":"Web/JavaScript/JS 正则表达式.md"}'),t={name:"Web/JavaScript/JS 正则表达式.md"},l=s(`<h2 id="什么是正则表达式" tabindex="-1">什么是正则表达式？ <a class="header-anchor" href="#什么是正则表达式" aria-label="Permalink to &quot;什么是正则表达式？&quot;">​</a></h2><p>正则表达式是构成搜索模式（search pattern）的字符序列。</p><p>当您搜索文本中的数据时，您可使用搜索模式来描述您搜索的内容。</p><p>正则表达式可以是单字符，或者更复杂的模式。</p><p>正则表达式可用于执行所有类型的文本搜索和文本替换操作。</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">modifiers;</span></span></code></pre></div><h3 id="使用字符串方法" tabindex="-1">使用字符串方法 <a class="header-anchor" href="#使用字符串方法" aria-label="Permalink to &quot;使用字符串方法&quot;">​</a></h3><p>在 JavaScript 中，正则表达式常用于两个字符串方法:</p><ul><li><p><code>search()</code> 方法使用表达式来搜索匹配，然后返回匹配的位置。</p></li><li><p><code>replace()</code> 方法返回模式被替换处修改后的字符串。</p></li></ul><h3 id="正则表达式修饰符" tabindex="-1">正则表达式修饰符 <a class="header-anchor" href="#正则表达式修饰符" aria-label="Permalink to &quot;正则表达式修饰符&quot;">​</a></h3><ul><li><p><code>i</code>--执行对大小写不敏感的匹配。</p></li><li><p><code>g</code>--执行全局匹配。</p></li><li><p><code>m</code>--执行多行匹配。</p></li></ul><h3 id="正则表达式模式" tabindex="-1">正则表达式模式 <a class="header-anchor" href="#正则表达式模式" aria-label="Permalink to &quot;正则表达式模式&quot;">​</a></h3><ul><li><code>[abc]</code>--查找方括号之间的任何字符。</li><li><code>[0-9]</code>--查找任何从 0 至 9 的数字。</li><li><code>(x|y)</code>--查找由 | 分隔的任何选项。</li></ul><h3 id="元字符-metacharacter" tabindex="-1">元字符（Metacharacter） <a class="header-anchor" href="#元字符-metacharacter" aria-label="Permalink to &quot;元字符（Metacharacter）&quot;">​</a></h3><ul><li><code>\\d</code>--查找数字。</li><li><code>\\s</code>--查找空白字符。</li><li><code>\\b</code>--匹配单词边界。</li><li><code>\\uxxxx</code>--查找以十六进制数 xxxx 规定的 Unicode 字符。</li></ul><h3 id="quantifiers-定义量词" tabindex="-1">Quantifiers 定义量词 <a class="header-anchor" href="#quantifiers-定义量词" aria-label="Permalink to &quot;Quantifiers 定义量词&quot;">​</a></h3><ul><li><code>n+</code>--匹配任何包含至少一个 n 的字符串。</li><li><code>n*</code>--匹配任何包含零个或多个 n 的字符串。</li><li><code>n?</code>--匹配任何包含零个或一个 n 的字符串。</li></ul><h3 id="使用-regexp-对象" tabindex="-1">使用 RegExp 对象 <a class="header-anchor" href="#使用-regexp-对象" aria-label="Permalink to &quot;使用 RegExp 对象&quot;">​</a></h3><p>在 JavaScript 中，<code>RegExp</code> 对象是带有预定义属性和方法的正则表达式对象。</p><h3 id="使用-test" tabindex="-1">使用 test() <a class="header-anchor" href="#使用-test" aria-label="Permalink to &quot;使用 test()&quot;">​</a></h3><p><code>test()</code> 是一个正则表达式方法。</p><p>它通过模式来搜索字符串，然后根据结果返回 true 或 false。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> patt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">patt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The best things in life are free!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="使用-exec" tabindex="-1">使用 exec() <a class="header-anchor" href="#使用-exec" aria-label="Permalink to &quot;使用 exec()&quot;">​</a></h3><p><code>exec()</code> 方法是一个正则表达式方法。</p><p>它通过指定的模式（pattern）搜索字符串，并返回已找到的文本。</p><p>如果未找到匹配，则返回 null。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The best things in life are free!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,29),h=[l];function n(p,r,d,o,c,k){return e(),i("div",null,h)}const g=a(t,[["render",n]]);export{E as __pageData,g as default};
