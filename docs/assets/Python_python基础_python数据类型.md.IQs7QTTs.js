import{_ as t,c as s,o as e,a4 as a}from"./chunks/framework.BtaI5osv.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Python/python基础/python数据类型.md","filePath":"Python/python基础/python数据类型.md"}'),i={name:"Python/python基础/python数据类型.md"},l=a(`<h2 id="内置数据类型" tabindex="-1">内置数据类型 <a class="header-anchor" href="#内置数据类型" aria-label="Permalink to &quot;内置数据类型&quot;">​</a></h2><p>在编程中，数据类型是一个重要的概念。</p><p>变量可以存储不同类型的数据，并且不同类型可以执行不同的操作。</p><p>在这些类别中，Python 默认拥有以下内置数据类型：</p><table><thead><tr><th>文本类型：</th><th><code>str</code></th></tr></thead><tbody><tr><td>数值类型：</td><td><code>int</code>, <code>float</code>, <code>complex</code></td></tr><tr><td>序列类型：</td><td><code>list</code>, <code>tuple</code>, <code>range</code></td></tr><tr><td>映射类型：</td><td><code>dict</code></td></tr><tr><td>集合类型：</td><td><code>set</code>, <code>frozenset</code></td></tr><tr><td>布尔类型：</td><td><code>bool</code></td></tr><tr><td>二进制类型：</td><td><code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></td></tr></tbody></table><ul><li>浮点数也可以是带有“e”的科学数字，表示 10 的幂。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 27e4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15E2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">49.8e100</span></span></code></pre></div><ul><li>复数用 &quot;j&quot; 作为虚部编写：</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">j</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">j</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">j</span></span></code></pre></div><ul><li><strong>布尔表示两值之一：True 或 False。</strong></li></ul><h2 id="获取数据类型" tabindex="-1">获取数据类型 <a class="header-anchor" href="#获取数据类型" aria-label="Permalink to &quot;获取数据类型&quot;">​</a></h2><p>您可以使用 type() 函数获取任何对象的数据类型：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># &lt;class &#39;int&#39;&gt;</span></span></code></pre></div><h2 id="设定特定的数据类型" tabindex="-1">设定特定的数据类型 <a class="header-anchor" href="#设定特定的数据类型" aria-label="Permalink to &quot;设定特定的数据类型&quot;">​</a></h2><p>如果希望指定数据类型，则您可以使用以下构造函数：</p><table><thead><tr><th style="text-align:left;">示例</th><th style="text-align:left;">数据类型</th></tr></thead><tbody><tr><td style="text-align:left;">x = str(&quot;Hello World&quot;)</td><td style="text-align:left;">str</td></tr><tr><td style="text-align:left;">x = int(29)</td><td style="text-align:left;">int</td></tr><tr><td style="text-align:left;">x = float(29.5)</td><td style="text-align:left;">float</td></tr><tr><td style="text-align:left;">x = complex(1j)</td><td style="text-align:left;">complex</td></tr><tr><td style="text-align:left;">x = list((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))</td><td style="text-align:left;">list</td></tr><tr><td style="text-align:left;">x = tuple((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))</td><td style="text-align:left;">tuple</td></tr><tr><td style="text-align:left;">x = range(6)</td><td style="text-align:left;">range</td></tr><tr><td style="text-align:left;">x = dict(name=&quot;Bill&quot;, age=36)</td><td style="text-align:left;">dict</td></tr><tr><td style="text-align:left;">x = set((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))</td><td style="text-align:left;">set</td></tr><tr><td style="text-align:left;">x = frozenset((&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;))</td><td style="text-align:left;">frozenset</td></tr><tr><td style="text-align:left;">x = bool(5)</td><td style="text-align:left;">bool</td></tr><tr><td style="text-align:left;">x = bytes(5)</td><td style="text-align:left;">bytes</td></tr><tr><td style="text-align:left;">x = bytearray(5)</td><td style="text-align:left;">bytearray</td></tr><tr><td style="text-align:left;">x = memoryview(bytes(5))</td><td style="text-align:left;">memoryview</td></tr></tbody></table>`,16),n=[l];function d(h,p,o,r,k,y){return e(),s("div",null,n)}const u=t(i,[["render",d]]);export{g as __pageData,u as default};
