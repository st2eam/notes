import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.COET-Ywn.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Python/python基础/python循环.md","filePath":"Python/python基础/python循环.md"}'),n={name:"Python/python基础/python循环.md"},h=e(`<h2 id="while-循环" tabindex="-1">while 循环 <a class="header-anchor" href="#while-循环" aria-label="Permalink to &quot;while 循环&quot;">​</a></h2><p>如果使用 <code>while</code> 循环，只要条件为真，我们就可以执行一组语句。</p><h3 id="else-语句" tabindex="-1">else 语句 <a class="header-anchor" href="#else-语句" aria-label="Permalink to &quot;else 语句&quot;">​</a></h3><p>通过使用 else 语句，当条件不再成立时，我们可以运行一次代码块：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i is no longer less than 6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h2><p><code>for</code> 循环用于迭代序列（即列表，元组，字典，集合或字符串）。</p><p>这与其他编程语言中的 <code>for</code> 关键字不太相似，而是更像其他面向对象编程语言中的迭代器方法。</p><h3 id="for-循环中的-else" tabindex="-1">for 循环中的 Else <a class="header-anchor" href="#for-循环中的-else" aria-label="Permalink to &quot;for 循环中的 Else&quot;">​</a></h3><p>for 循环中的 <code>else</code> 关键字指定循环结束时要执行的代码块</p><p>打印 0 到 9 的所有数字，并在循环结束时打印一条消息：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Finally finished!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="range-函数" tabindex="-1">range() 函数 <a class="header-anchor" href="#range-函数" aria-label="Permalink to &quot;range() 函数&quot;">​</a></h3><p>如需循环一组代码指定的次数，我们可以使用 <code>range()</code> 函数，<code>range()</code> 函数返回一个数字序列，默认情况下从 0 开始，并递增 1（默认地），并以指定的数字结束。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><h2 id="break-语句" tabindex="-1">break 语句 <a class="header-anchor" href="#break-语句" aria-label="Permalink to &quot;break 语句&quot;">​</a></h2><p>如果使用 <code>break</code> 语句，即使 while 条件为真，我们也可以停止循环</p><h2 id="continue-语句" tabindex="-1">continue 语句 <a class="header-anchor" href="#continue-语句" aria-label="Permalink to &quot;continue 语句&quot;">​</a></h2><p>如果使用 <code>continue</code> 语句，我们可以停止当前的迭代，并继续下一个</p><p><strong>提示：</strong><code>for</code> 循环不需要预先设置索引变量，<code>while</code> 循环需要准备好相关的变量。</p>`,20),t=[h];function l(p,k,r,o,d,c){return a(),i("div",null,t)}const y=s(n,[["render",l]]);export{g as __pageData,y as default};
