import{_ as i,c as a,a2 as n,o as t}from"./chunks/framework.BW-ZVgUE.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/QT/QT 样式表.md","filePath":"C++/QT/QT 样式表.md"}'),h={name:"C++/QT/QT 样式表.md"};function p(l,s,k,e,E,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="qt样式表" tabindex="-1">QT样式表 <a class="header-anchor" href="#qt样式表" aria-label="Permalink to &quot;QT样式表&quot;">​</a></h2><p>QT样式表可以让你自定义任何一个QT控件的样式包括颜色、边框、背景等等（你想的到样式都可以），Qt样式表的概念、术语和语法与HTML的CSS样式表类似。</p><p>这里将所有内容分为了几部分：</p><ul><li>The Style Sheet Syntax中介绍了Qt样式表的语法，就是一些使用规则；</li><li>Qt Designer Integration中介绍了如何在设计器中使用Qt样式表；</li><li>CustomizingQt Widgets Using Style Sheets中介绍了如何使用Qt样式表来定制部件样式；</li><li>QtStyle Sheets Reference中罗列了Qt中所有可以使用样式表的部件；</li><li>QtStyle Sheets Examples中列出了常用部件使用样式表的例子，这个是我们后面学习使用时的重要参考。</li></ul><h4 id="样式规则" tabindex="-1">样式规则 <a class="header-anchor" href="#样式规则" aria-label="Permalink to &quot;样式规则&quot;">​</a></h4><ul><li><strong>样式的规则1</strong>：样式规则由选择器和声明组成。选择器指定哪些小部件受规则影响;声明指定应该在小部件上设置哪些属性。</li><li><strong>样式的规则2</strong>：可以为同一个声明指定多个选择器，使用逗号(，)分隔选择器。</li><li><strong>样式的规则3</strong>：声明多个属性。在{}里面，用 ; 分割</li><li><strong>样式的规则4：选择器</strong></li></ul><p><strong>4.1 通配选择器</strong></p><p>* 匹配所有的控件</p><p><strong>4.2 类型选择器</strong></p><p><code>类名 { 属性: 值; }</code></p><p><code>QPushBuutton{ }</code></p><p><strong>4.3 属性选择器</strong></p><p><code>QPushButton[flat=&quot;false&quot;]</code></p><p>匹配所有flat属性是false的QPushButton实例，注意该属性可以是自定义的属性，不一定非要是类本身具有的属性</p><p><strong>4.4 类选择器</strong></p><p>格式 <code>.类名 { 属性: 值; }</code></p><p><code>.QPushButton</code></p><p>匹配所有QPushButton的实例，但是并不匹配其子类。这是与CSS中的类选择器不一样的地方，注意前面有一个点号</p><p><code>.RedButton { background: magenta; }</code></p><p><strong>4.5 ID 选择器</strong></p><p>格式 <code>#id{ 属性: 值; }</code></p><p>这里的 id 指的是 objectName, 每个 QObject 类及其派生类都有的一个属性, <code>“#” + objectName</code></p><p><code>#myButton</code></p><p>匹配所有id为myButton的控件实例，这里的id实际上就是objectName指定的值</p><p><code>#openButton, #closeButton { background: magenta; }</code></p><p><strong>4.6 后代选择器</strong><br><code>选择器 1 选择器 2{ 属性: 值; }</code> 这个选择器表示: 在选择器 1 匹配的所有对象中, 找到选择器 2 所匹配的所有后代对象, 并 给它们设置样式.</p><p><strong>4.7 子选择器</strong></p><p><code>选择器 1 &gt;选择器 2 { 属性: 值; }</code> 子元素选择器表示找到指定选择器所匹配的对象中的所有特定直接子元素然后设置属性, 即找到选择器 1 匹配到的对象中的被选择器 2 匹配到的直接子元素然后设置属性</p><p><code>QFrame&gt; QPushButton</code> 所有QFrame容器下面的QPushButton，其中要求QPushButton的直接父容器是QFrame,注意和后代选择器的区别</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QFrame {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    QFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> QPushButton {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> magenta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        border-radius</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">white</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span></code></pre></div><p><strong>4.8 伪类选择器</strong></p><p>类型选择器:状态{ 属性: 值; }<br> 类选择器:状态{ 属性: 值; }<br> 选择器:状态<br> 作为选择器，支持 ! 操作符，表示 非。</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QPushButton</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">white</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QCheckBox</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:checked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">white</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">QCheckBox:!checked { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">red</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h5 id="qss伪状态与子控件伪状态列表" tabindex="-1">QSS伪状态与子控件伪状态列表 <a class="header-anchor" href="#qss伪状态与子控件伪状态列表" aria-label="Permalink to &quot;QSS伪状态与子控件伪状态列表&quot;">​</a></h5><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:checked</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        /*button部件被选中*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:unchecked                      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*button部件未被选中*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:disabled</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                       /*部件被禁用*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:enabled</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        /*部件被启用*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:focus</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          /*部件获得焦点*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:hover</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                          /*鼠标位于部件上*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:indeterminate</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                  /*checkbox或radiobutton被部分选中*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:off                            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*部件可以切换，且处于off状态*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:on                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*部件可以切换，且处于on状态*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:pressed                        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*部件被鼠标按下*/</span></span></code></pre></div><h5 id="子部件列表" tabindex="-1">子部件列表 <a class="header-anchor" href="#子部件列表" aria-label="Permalink to &quot;子部件列表&quot;">​</a></h5><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">down-arrow</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         /*combo box或spin box的下拉箭头*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">drop-down</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /*combo box的下拉箭头*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::indicator      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*checkbox、radio button或可选择group box的指示器*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::item               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*menu、menu bar或status bar的子项目*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">menu-indicator</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     /*push button的菜单指示器*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::title              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*group box的标题*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">down-button</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /*spin box的向下按钮*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">up-arrow</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           /*spin box的向上箭头*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">up-button</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /*spin box的向上按钮*/</span></span></code></pre></div><h4 id="添加和读取qss文件" tabindex="-1">添加和读取QSS文件 <a class="header-anchor" href="#添加和读取qss文件" aria-label="Permalink to &quot;添加和读取QSS文件&quot;">​</a></h4><ol><li><p>QT添加资源文件.qrc</p></li><li><p>添加完前缀，同样在添加里选中添加文件，然后选中准备好的文件(图片、.qss文件等资源)</p></li><li><p>构建后，在代码处读取.qss文件，就可以给ui加皮肤了</p></li></ol><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setQtStyleSheet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   QFile </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:/Calculator.qss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">QFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::ReadOnly);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   QString styleSheet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QLatin1String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   QMainWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setStyleSheet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(styleSheet);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,40)]))}const g=i(h,[["render",p]]);export{o as __pageData,g as default};
