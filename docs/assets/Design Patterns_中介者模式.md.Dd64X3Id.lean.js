import{_ as t,E as l,c as k,J as a,w as n,m as s,a as p,a4 as h,o as e}from"./chunks/framework.B-C7vMfR.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Design Patterns/中介者模式.md","filePath":"Design Patterns/中介者模式.md"}'),r={name:"Design Patterns/中介者模式.md"},E=s("h2",{id:"中介者模式",tabindex:"-1"},[p("中介者模式 "),s("a",{class:"header-anchor",href:"#中介者模式","aria-label":'Permalink to "中介者模式"'},"​")],-1),d=s("p",null,"中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。",-1),g=s("img",{src:"https://refactoringguru.cn/images/patterns/content/mediator/mediator.png"},null,-1),o=h("",5),y=s("img",{src:"https://www.runoob.com/wp-content/uploads/2014/08/mediator_pattern_uml_diagram.jpg"},null,-1),F=h("",13);function c(u,C,m,_,A,D){const i=l("center");return e(),k("div",null,[E,d,a(i,null,{default:n(()=>[g]),_:1}),o,a(i,null,{default:n(()=>[y]),_:1}),F])}const v=t(r,[["render",c]]);export{b as __pageData,v as default};
