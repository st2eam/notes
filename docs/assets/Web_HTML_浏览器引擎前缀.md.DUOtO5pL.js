import{_ as s,c as a,o as i,a4 as e}from"./chunks/framework.COET-Ywn.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/HTML/浏览器引擎前缀.md","filePath":"Web/HTML/浏览器引擎前缀.md"}'),l={name:"Web/HTML/浏览器引擎前缀.md"},t=e(`<h2 id="css-前缀" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix#css_%E5%89%8D%E7%BC%80" target="_blank" rel="noreferrer">CSS 前缀</a> <a class="header-anchor" href="#css-前缀" aria-label="Permalink to &quot;[CSS 前缀](https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix#css_%E5%89%8D%E7%BC%80)&quot;">​</a></h2><p>主流浏览器引擎前缀:</p><ul><li>-webkit- （谷歌，Safari，新版Opera浏览器，以及几乎所有iOS系统中的浏览器（包括 iOS 系统中的火狐浏览器）；基本上所有基于WebKit 内核的浏览器）</li><li>-moz- （火狐浏览器）</li><li>-o- （旧版Opera浏览器）</li><li>-ms- （IE浏览器 和 Edge浏览器）</li></ul><p>示例:</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-webkit-transition: all 4s ease;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-moz-transition: all 4s ease;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-ms-transition: all 4s ease;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-o-transition: all 4s ease;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">transition: all 4s ease;</span></span></code></pre></div><h2 id="api-前缀" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix#api_%E5%89%8D%E7%BC%80" target="_blank" rel="noreferrer">API 前缀</a> <a class="header-anchor" href="#api-前缀" aria-label="Permalink to &quot;[API 前缀](https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix#api_%E5%89%8D%E7%BC%80)&quot;">​</a></h2><p>过去，浏览器引擎也使用前缀修饰实验性质的API。如果整个接口都是实验性的，前缀修饰的就是接口名（但不包括其中的属性或者方法）。如果将一个实验性的接口或者方法添加到一个标准化的接口中，这个新增的接口或者方法被前缀修饰。</p><h2 id="接口前缀" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix#%E6%8E%A5%E5%8F%A3%E5%89%8D%E7%BC%80" target="_blank" rel="noreferrer">接口前缀</a> <a class="header-anchor" href="#接口前缀" aria-label="Permalink to &quot;[接口前缀](https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix#%E6%8E%A5%E5%8F%A3%E5%89%8D%E7%BC%80)&quot;">​</a></h2><p>需要使用大写的前缀修饰接口名：</p><ul><li>WebKit (谷歌, Safari, 新版Opera浏览器, 以及几乎所有iOS系统中的浏览器(包括iOS 系统中的火狐浏览器); 简单的说，所有基于WebKit 内核的浏览器)</li><li>Moz (火狐浏览器)</li><li>O (旧版Opera浏览器)</li><li>MS (IE浏览器 和 Edge浏览器)</li></ul><h3 id="属性和方法前缀" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix#%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E5%89%8D%E7%BC%80" target="_blank" rel="noreferrer">属性和方法前缀</a> <a class="header-anchor" href="#属性和方法前缀" aria-label="Permalink to &quot;[属性和方法前缀](https://developer.mozilla.org/zh-CN/docs/Glossary/Vendor_Prefix#%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95%E5%89%8D%E7%BC%80)&quot;">​</a></h3><p>需要使用小写的前缀修饰属性或者方法</p><ul><li>webkit (谷歌, Safari, 新版Opera浏览器, 以及几乎所有iOS系统中的浏览器(包括iOS 系统中的火狐浏览器); 简单的说，所有基于WebKit 内核的浏览器)</li><li>moz (火狐浏览器)</li><li>o (旧版Opera浏览器等</li><li>ms (IE浏览器 和 Edge浏览器)</li></ul><p>示例:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> requestAnimationFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.requestAnimationFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            window.mozRequestAnimationFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            window.webkitRequestAnimationFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            window.oRequestAnimationFrame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            window.msRequestAnimationFrame;</span></span></code></pre></div>`,15),n=[t];function r(o,p,h,d,E,k){return i(),a("div",null,n)}const g=s(l,[["render",r]]);export{_ as __pageData,g as default};
