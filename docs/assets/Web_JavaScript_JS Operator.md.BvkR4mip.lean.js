import{_ as s,c as i,a2 as h,o as e}from"./chunks/framework.BW-ZVgUE.js";const c=JSON.parse('{"title":"JS 表达式和运算符","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/JS Operator.md","filePath":"Web/JavaScript/JS Operator.md"}'),n={name:"Web/JavaScript/JS Operator.md"};function t(l,a,p,k,r,d){return e(),i("div",null,a[0]||(a[0]=[h('<h1 id="js-表达式和运算符" tabindex="-1">JS 表达式和运算符 <a class="header-anchor" href="#js-表达式和运算符" aria-label="Permalink to &quot;JS 表达式和运算符&quot;">​</a></h1><h2 id="rest-spread-运算符" tabindex="-1">Rest &amp; Spread 运算符 <a class="header-anchor" href="#rest-spread-运算符" aria-label="Permalink to &quot;Rest &amp; Spread 运算符&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">manyMoreArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;five&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;six&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: 6</span></span></code></pre></div><p>&amp;&amp;</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> parts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;shoulders&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;knees&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> lyrics</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;head&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parts, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;and&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;toes&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]; </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lyrics;</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;head&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shoulders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;knees&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;and&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>&amp;&amp;</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { one: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, two: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, three: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, four: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, five: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, six: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">two</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rest)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//{ one: 1, three: 3, four: 4, five: 5, six: 6 }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;three&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;four&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;five&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;six&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">three</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rest2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr2</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rest2)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//[ &#39;two&#39;, &#39;three&#39;, &#39;four&#39;, &#39;five&#39;, &#39;six&#39; ]</span></span></code></pre></div><h2 id="" tabindex="-1"><code>??</code> <a class="header-anchor" href="#" aria-label="Permalink to &quot;`??`&quot;">​</a></h2><p>空合并运算符 (??) 是一个逻辑运算符，当其左侧操作数为空或未定义时返回其右侧操作数，否则返回其左侧操作数。</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = null ?? </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my school&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 输出: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my school&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">const </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 0 ?? 42</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 输出: 0</span></span></code></pre></div><h2 id="自增和自减" tabindex="-1">自增和自减 <a class="header-anchor" href="#自增和自减" aria-label="Permalink to &quot;自增和自减&quot;">​</a></h2><h3 id="a" tabindex="-1"><code>A++</code> <a class="header-anchor" href="#a" aria-label="Permalink to &quot;`A++`&quot;">​</a></h3><p>后置自增运算符。</p><h3 id="a-1" tabindex="-1"><code>A--</code> <a class="header-anchor" href="#a-1" aria-label="Permalink to &quot;`A--`&quot;">​</a></h3><p>后置自减运算符。</p><h3 id="a-2" tabindex="-1"><code>++A</code> <a class="header-anchor" href="#a-2" aria-label="Permalink to &quot;`++A`&quot;">​</a></h3><p>前置自增运算符。</p><h3 id="a-3" tabindex="-1"><code>--A</code> <a class="header-anchor" href="#a-3" aria-label="Permalink to &quot;`--A`&quot;">​</a></h3><p>前置自减运算符。</p><h2 id="一元运算符" tabindex="-1">一元运算符 <a class="header-anchor" href="#一元运算符" aria-label="Permalink to &quot;一元运算符&quot;">​</a></h2><p>一元运算符只有一个操作数。</p><h3 id="num" tabindex="-1"><code>+num</code> <a class="header-anchor" href="#num" aria-label="Permalink to &quot;`+num`&quot;">​</a></h3><p>一元加运算符将操作转换为 Number 类型。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: -1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 0</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: NaN</span></span></code></pre></div><h3 id="num-1" tabindex="-1"><code>-num</code> <a class="header-anchor" href="#num-1" aria-label="Permalink to &quot;`-num`&quot;">​</a></h3><p>一元减运算符将操作转换为 Number 类型并取反。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: -4</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: -4</span></span></code></pre></div><h3 id="bool" tabindex="-1"><code>~bool</code> <a class="header-anchor" href="#bool" aria-label="Permalink to &quot;`~bool`&quot;">​</a></h3><p>按位非运算符。</p><h3 id="bool-1" tabindex="-1"><code>!bool</code> <a class="header-anchor" href="#bool-1" aria-label="Permalink to &quot;`!bool`&quot;">​</a></h3><p>逻辑非运算符。</p><h2 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h2><p>算术运算符以二个数值（字面量或变量）作为操作数，并返回单个数值。</p><h3 id="-1" tabindex="-1"><code>+</code> <a class="header-anchor" href="#-1" aria-label="Permalink to &quot;`+`&quot;">​</a></h3><p>加法运算符。</p><h3 id="-2" tabindex="-1"><code>-</code> <a class="header-anchor" href="#-2" aria-label="Permalink to &quot;`-`&quot;">​</a></h3><p>减法运算符。</p><h3 id="-3" tabindex="-1"><code>/</code> <a class="header-anchor" href="#-3" aria-label="Permalink to &quot;`/`&quot;">​</a></h3><p>除法运算符。</p><h3 id="-4" tabindex="-1"><code>*</code> <a class="header-anchor" href="#-4" aria-label="Permalink to &quot;`*`&quot;">​</a></h3><p>乘法运算符。</p><h3 id="-5" tabindex="-1"><code>%</code> <a class="header-anchor" href="#-5" aria-label="Permalink to &quot;`%`&quot;">​</a></h3><p>取模运算符。</p><h3 id="-6" tabindex="-1"><code>**</code> <a class="header-anchor" href="#-6" aria-label="Permalink to &quot;`**`&quot;">​</a></h3><p>求幂运算符。</p><h2 id="关系运算符" tabindex="-1">关系运算符 <a class="header-anchor" href="#关系运算符" aria-label="Permalink to &quot;关系运算符&quot;">​</a></h2><p>比较运算符比较两个操作数并返回基于比较结果的布尔值。</p><h3 id="in" tabindex="-1"><code>in</code> <a class="header-anchor" href="#in" aria-label="Permalink to &quot;`in`&quot;">​</a></h3><p>in 运算符用来判断对象是否拥有给定属性。</p><h3 id="-7" tabindex="-1"><code>&lt;</code> <a class="header-anchor" href="#-7" aria-label="Permalink to &quot;`&lt;`&quot;">​</a></h3><p>小于运算符。</p><h3 id="-8" tabindex="-1"><code>&gt;</code> <a class="header-anchor" href="#-8" aria-label="Permalink to &quot;`&gt;`&quot;">​</a></h3><p>大于运算符。</p><h3 id="-9" tabindex="-1"><code>&lt;=</code> <a class="header-anchor" href="#-9" aria-label="Permalink to &quot;`&lt;=`&quot;">​</a></h3><p>小于等于运算符。</p><h3 id="-10" tabindex="-1"><code>&gt;=</code> <a class="header-anchor" href="#-10" aria-label="Permalink to &quot;`&gt;=`&quot;">​</a></h3><p>大于等于运算符。</p><h2 id="相等运算符" tabindex="-1">相等运算符 <a class="header-anchor" href="#相等运算符" aria-label="Permalink to &quot;相等运算符&quot;">​</a></h2><p>如果相等，操作符返回的是布尔类型的 true，否则是 false。</p><h3 id="-11" tabindex="-1"><code>==</code> <a class="header-anchor" href="#-11" aria-label="Permalink to &quot;`==`&quot;">​</a></h3><p>相等运算符。</p><h3 id="-12" tabindex="-1"><code>!=</code> <a class="header-anchor" href="#-12" aria-label="Permalink to &quot;`!=`&quot;">​</a></h3><p>不等运算符。</p><h3 id="-13" tabindex="-1"><code>===</code> <a class="header-anchor" href="#-13" aria-label="Permalink to &quot;`===`&quot;">​</a></h3><p>全等运算符。</p><h3 id="-14" tabindex="-1"><code>!==</code> <a class="header-anchor" href="#-14" aria-label="Permalink to &quot;`!==`&quot;">​</a></h3><p>非全等运算符。</p><h2 id="位移运算符" tabindex="-1">位移运算符 <a class="header-anchor" href="#位移运算符" aria-label="Permalink to &quot;位移运算符&quot;">​</a></h2><p>在二进制的基础上对数字进行移动操作</p><h3 id="-15" tabindex="-1"><code>&lt;&lt;</code> <a class="header-anchor" href="#-15" aria-label="Permalink to &quot;`&lt;&lt;`&quot;">​</a></h3><p>按位左移运算符。</p><h3 id="-16" tabindex="-1"><code>&gt;&gt;</code> <a class="header-anchor" href="#-16" aria-label="Permalink to &quot;`&gt;&gt;`&quot;">​</a></h3><p>按位右移运算符。</p><h3 id="-17" tabindex="-1"><code>&gt;&gt;&gt;</code> <a class="header-anchor" href="#-17" aria-label="Permalink to &quot;`&gt;&gt;&gt;`&quot;">​</a></h3><p>按位无符号右移运算符。</p><h2 id="二进制位运算符" tabindex="-1">二进制位运算符 <a class="header-anchor" href="#二进制位运算符" aria-label="Permalink to &quot;二进制位运算符&quot;">​</a></h2><p>二进制运算符将它们的操作数作为 32 个二进制位（0 或 1）的集合，并返回标准的 JavaScript 数值。</p><h3 id="-18" tabindex="-1"><code>&amp;</code> <a class="header-anchor" href="#-18" aria-label="Permalink to &quot;`&amp;`&quot;">​</a></h3><p>按位与（AND）。</p><h3 id="-19" tabindex="-1"><code>|</code> <a class="header-anchor" href="#-19" aria-label="Permalink to &quot;`|`&quot;">​</a></h3><p>按位或（OR）。</p><h3 id="-20" tabindex="-1"><code>^</code> <a class="header-anchor" href="#-20" aria-label="Permalink to &quot;`^`&quot;">​</a></h3><p>位异或（XOR）。</p><h2 id="二元逻辑运算符" tabindex="-1">二元逻辑运算符 <a class="header-anchor" href="#二元逻辑运算符" aria-label="Permalink to &quot;二元逻辑运算符&quot;">​</a></h2><p>逻辑运算符典型的用法是用于布尔（逻辑）值运算，它们返回布尔值。</p><h3 id="-21" tabindex="-1"><code>&amp;&amp;</code> <a class="header-anchor" href="#-21" aria-label="Permalink to &quot;`&amp;&amp;`&quot;">​</a></h3><p>逻辑与。</p><h3 id="-22" tabindex="-1"><code>||</code> <a class="header-anchor" href="#-22" aria-label="Permalink to &quot;`||`&quot;">​</a></h3><p>逻辑或。</p><h3 id="-23" tabindex="-1"><code>??</code> <a class="header-anchor" href="#-23" aria-label="Permalink to &quot;`??`&quot;">​</a></h3><p>空值合并运算符，如果 ?? 前面是 null 或 undefined，取后面的默认值。</p><h2 id="可选链运算符" tabindex="-1">可选链运算符 <a class="header-anchor" href="#可选链运算符" aria-label="Permalink to &quot;可选链运算符&quot;">​</a></h2><h3 id="-24" tabindex="-1"><code>?.</code> <a class="header-anchor" href="#-24" aria-label="Permalink to &quot;`?.`&quot;">​</a></h3><p>如果引用是空值（null 或 undefined），可选链运算符将返回 undefined 而不是导致错误。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.val?.prop</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.val?.[expr]</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?.(args)</span></span></code></pre></div><h2 id="条件-三元-运算符" tabindex="-1">条件（三元）运算符 <a class="header-anchor" href="#条件-三元-运算符" aria-label="Permalink to &quot;条件（三元）运算符&quot;">​</a></h2><h3 id="condition-iftrue-iffalse" tabindex="-1"><code>(condition ? ifTrue : ifFalse)</code> <a class="header-anchor" href="#condition-iftrue-iffalse" aria-label="Permalink to &quot;`(condition ? ifTrue : ifFalse)`&quot;">​</a></h3><p>条件元素运算符把两个结果中其中一个符合运算逻辑的值返回。</p><h2 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h2><p>赋值运算符将右边的操作数的值分配给左边的操作数。</p><h3 id="-25" tabindex="-1"><code>=</code> <a class="header-anchor" href="#-25" aria-label="Permalink to &quot;`=`&quot;">​</a></h3><p>赋值运算符。</p><h3 id="-26" tabindex="-1"><code>*=</code> <a class="header-anchor" href="#-26" aria-label="Permalink to &quot;`*=`&quot;">​</a></h3><p>赋值乘积。</p><h3 id="-27" tabindex="-1"><code>**=</code> <a class="header-anchor" href="#-27" aria-label="Permalink to &quot;`**=`&quot;">​</a></h3><p>求幂赋值。</p><h3 id="-28" tabindex="-1"><code>/=</code> <a class="header-anchor" href="#-28" aria-label="Permalink to &quot;`/=`&quot;">​</a></h3><p>赋值商。</p><h3 id="-29" tabindex="-1"><code>%=</code> <a class="header-anchor" href="#-29" aria-label="Permalink to &quot;`%=`&quot;">​</a></h3><p>赋值求余。</p><h3 id="-30" tabindex="-1"><code>+=</code> <a class="header-anchor" href="#-30" aria-label="Permalink to &quot;`+=`&quot;">​</a></h3><p>赋值求和。</p><h3 id="-31" tabindex="-1"><code>-=</code> <a class="header-anchor" href="#-31" aria-label="Permalink to &quot;`-=`&quot;">​</a></h3><p>赋值求差。</p><h3 id="-32" tabindex="-1"><code>&lt;&lt;=</code> <a class="header-anchor" href="#-32" aria-label="Permalink to &quot;`&lt;&lt;=`&quot;">​</a></h3><p>左位移。</p><h3 id="-33" tabindex="-1"><code>&gt;&gt;=</code> <a class="header-anchor" href="#-33" aria-label="Permalink to &quot;`&gt;&gt;=`&quot;">​</a></h3><p>右位移。</p><h3 id="-34" tabindex="-1"><code>&gt;&gt;&gt;=</code> <a class="header-anchor" href="#-34" aria-label="Permalink to &quot;`&gt;&gt;&gt;=`&quot;">​</a></h3><p>无符号右位移。</p><h3 id="-35" tabindex="-1"><code>&amp;=</code> <a class="header-anchor" href="#-35" aria-label="Permalink to &quot;`&amp;=`&quot;">​</a></h3><p>赋值与。</p><h3 id="-36" tabindex="-1"><code>^=</code> <a class="header-anchor" href="#-36" aria-label="Permalink to &quot;`^=`&quot;">​</a></h3><p>赋值按位异或。</p><h3 id="-37" tabindex="-1"><code>|=</code> <a class="header-anchor" href="#-37" aria-label="Permalink to &quot;`|=`&quot;">​</a></h3><p>赋值或。</p><h3 id="-38" tabindex="-1"><code>&amp;&amp;=</code> <a class="header-anchor" href="#-38" aria-label="Permalink to &quot;`&amp;&amp;=`&quot;">​</a></h3><p>逻辑和赋值运算符。</p><h3 id="-39" tabindex="-1"><code>||=</code> <a class="header-anchor" href="#-39" aria-label="Permalink to &quot;`||=`&quot;">​</a></h3><p>逻辑或赋值运算符。</p><h3 id="-40" tabindex="-1"><code>??=</code> <a class="header-anchor" href="#-40" aria-label="Permalink to &quot;`??=`&quot;">​</a></h3><p>逻辑空赋值运算符。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { duration: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.duration);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 50</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a.speed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.speed);</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expected output: 25</span></span></code></pre></div><h3 id="a-b-arr-a-b-obj" tabindex="-1"><code>[a, b] = arr, { a, b } = obj</code> <a class="header-anchor" href="#a-b-arr-a-b-obj" aria-label="Permalink to &quot;`[a, b] = arr, { a, b } = obj`&quot;">​</a></h3><p>解构赋值允许你使用类似于数组或对象字面量的语法将数组或对象的属性赋值给变量。</p><h2 id="关键字" tabindex="-1">关键字 <a class="header-anchor" href="#关键字" aria-label="Permalink to &quot;关键字&quot;">​</a></h2><h3 id="delete" tabindex="-1"><code>delete</code> <a class="header-anchor" href="#delete" aria-label="Permalink to &quot;`delete`&quot;">​</a></h3><p>delete 运算符用来删除对象的属性。</p><h3 id="void" tabindex="-1"><code>void</code> <a class="header-anchor" href="#void" aria-label="Permalink to &quot;`void`&quot;">​</a></h3><p>void 运算符表示表达式放弃返回值。</p><h3 id="typeof" tabindex="-1"><code>typeof</code> <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;`typeof`&quot;">​</a></h3><p>typeof 运算符用来判断给定对象的类型。</p><h3 id="instanceof" tabindex="-1"><code>instanceof</code> <a class="header-anchor" href="#instanceof" aria-label="Permalink to &quot;`instanceof`&quot;">​</a></h3><p>instanceof 运算符判断一个对象是否是另一个对象的实例。</p><h3 id="yield" tabindex="-1"><code>yield</code> <a class="header-anchor" href="#yield" aria-label="Permalink to &quot;`yield`&quot;">​</a></h3><p>yield 关键字用于暂停和恢复生成器函数。</p><h2 id="逗号运算符" tabindex="-1">逗号运算符 <a class="header-anchor" href="#逗号运算符" aria-label="Permalink to &quot;逗号运算符&quot;">​</a></h2><h3 id="逗号操作符" tabindex="-1">逗号操作符 <code>,</code> <a class="header-anchor" href="#逗号操作符" aria-label="Permalink to &quot;逗号操作符 `,`&quot;">​</a></h3><p>逗号操作符允许在一个判断状态中有多个表达式去进行运算并且最后返回最后一个表达式的值。</p>',149)]))}const E=s(n,[["render",t]]);export{c as __pageData,E as default};
