import{_ as e,c as a,o as t,a4 as r}from"./chunks/framework.COET-Ywn.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/React/Hooks/Hook 预览.md","filePath":"Web/React/Hooks/Hook 预览.md"}'),o={name:"Web/React/Hooks/Hook 预览.md"},h=r('<h2 id="react-hook-预览" tabindex="-1">react hook 预览 <a class="header-anchor" href="#react-hook-预览" aria-label="Permalink to &quot;react hook 预览&quot;">​</a></h2><h5 id="定义变量" tabindex="-1">定义变量 <a class="header-anchor" href="#定义变量" aria-label="Permalink to &quot;定义变量&quot;">​</a></h5><p><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/02%20useState%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useState()</a>：定义普通变量<br><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/08%20useReducer%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useReducer()</a>：定义有不同类型、参数的变量</p><h5 id="组件传值" tabindex="-1">组件传值 <a class="header-anchor" href="#组件传值" aria-label="Permalink to &quot;组件传值&quot;">​</a></h5><p><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/06%20useContext%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useContext()</a>：定义和接收具有全局性质的属性传值对象，必须配合React.createContext()使用</p><h5 id="对象引用" tabindex="-1">对象引用 <a class="header-anchor" href="#对象引用" aria-label="Permalink to &quot;对象引用&quot;">​</a></h5><p><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/12%20useRef%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useRef()</a>：获取渲染后的DOM元素对象，可调用该对象原生html的方法，可能需要配合React.forwardRef()使用<br><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/13%20useImperativeHandle%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useImperativeHandle()</a>：获取和调用渲染后的DOM元素对象拥有的自定义方法，必须配合React.forwardRef()使用</p><h5 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h5><p><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/04%20useEffect%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useEffect()</a>：挂载或渲染完成后、即将被卸载前，调度<br><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/14%20useLayoutEffect%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useLayoutEffect()</a>：挂载或渲染完成后，同步调度</p><h5 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h5><p><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/10%20useCallback%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useCallback()</a>：获取某处理函数的引用，必须配合React.memo()使用<br><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/11%20useMemo%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useMemo()</a>：获取某处理函数返回值的副本</p><h5 id="代码调试" tabindex="-1">代码调试 <a class="header-anchor" href="#代码调试" aria-label="Permalink to &quot;代码调试&quot;">​</a></h5><p><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/15%20useDebugValue%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95.md" target="_blank" rel="noreferrer">useDebugValue()</a>：对react开发调试工具中的自定义hook，增加额外显示信息</p><h5 id="自定义hook" tabindex="-1">自定义hook <a class="header-anchor" href="#自定义hook" aria-label="Permalink to &quot;自定义hook&quot;">​</a></h5><p><a href="https://github.com/puxiao/react-hook-tutorial/blob/master/16%20%E8%87%AA%E5%AE%9A%E4%B9%89hook.md" target="_blank" rel="noreferrer">useCustomHook()</a>：将hook相关逻辑代码从组件中抽离，提高hook代码可复用性</p><h5 id="自定义-hook-大全" tabindex="-1">自定义 Hook 大全 <a class="header-anchor" href="#自定义-hook-大全" aria-label="Permalink to &quot;自定义 Hook 大全&quot;">​</a></h5><p>必不可少的 React Hooks集合。<br><a href="https://github.com/zenghongtu/react-use-chinese" target="_blank" rel="noreferrer">GitHub - zenghongtu/react-use-chinese: 中文文档@react-use</a></p>',17),l=[h];function s(u,i,c,n,b,k){return t(),a("div",null,l)}const f=e(o,[["render",s]]);export{d as __pageData,f as default};
