import{_ as i,c as a,a2 as t,o as e}from"./chunks/framework.BW-ZVgUE.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JS Lib/Ajax/AJAX.md","filePath":"Web/JS Lib/Ajax/AJAX.md"}'),l={name:"Web/JS Lib/Ajax/AJAX.md"};function n(p,s,h,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="什么是-ajax" tabindex="-1">什么是 AJAX？ <a class="header-anchor" href="#什么是-ajax" aria-label="Permalink to &quot;什么是 AJAX？&quot;">​</a></h2><p>AJAX = Asynchronous JavaScript And XML.</p><p>AJAX 仅仅组合了：</p><ul><li>浏览器内建的 XMLHttpRequest 对象（从 web 服务器请求数据）</li><li>JavaScript 和 HTML DOM（显示或使用数据）</li></ul><h3 id="ajax如何工作" tabindex="-1">AJAX如何工作 <a class="header-anchor" href="#ajax如何工作" aria-label="Permalink to &quot;AJAX如何工作&quot;">​</a></h3><ul><li>网页中发生一个事件（页面加载、按钮点击）</li><li>由 JavaScript 创建 XMLHttpRequest 对象</li><li>XMLHttpRequest 对象向 web 服务器发送请求</li><li>服务器处理该请求</li><li>服务器将响应发送回网页</li><li>由 JavaScript 读取响应</li><li>由 JavaScript 执行正确的动作（比如更新页面）</li></ul><h3 id="ajax-的核心是-xmlhttprequest-对象" tabindex="-1">Ajax 的核心是 XMLHttpRequest 对象 <a class="header-anchor" href="#ajax-的核心是-xmlhttprequest-对象" aria-label="Permalink to &quot;Ajax 的核心是 XMLHttpRequest 对象&quot;">​</a></h3><p><code>XMLHttpRequest</code> 对象用于同幕后服务器交换数据。这意味着可以更新网页的部分，而不需要重新加载整个页面。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>老版本的 Internet Explorer（IE5 和 IE6）使用 ActiveX 对象：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ActiveXObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.XMLHTTP&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>用下面这个</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhttp;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (window.XMLHttpRequest) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xhttp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // code for IE6, IE5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     xhttp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ActiveXObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft.XMLHTTP&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="跨域访问" tabindex="-1">跨域访问 <a class="header-anchor" href="#跨域访问" aria-label="Permalink to &quot;跨域访问&quot;">​</a></h3><p>出于安全原因，现代浏览器不允许跨域访问。</p><p>这意味着尝试加载的网页和 XML 文件都必须位于相同服务器上。</p><p>如果您希望在自己的页面上使用你的文件，那么您所加载的 XML 文件必须位于您自己的服务器上。</p>`,17)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};
