import{_ as s,c as a,o as i,a4 as n}from"./chunks/framework.B-C7vMfR.js";const E=JSON.parse('{"title":"应用设置","description":"","frontmatter":{},"headers":[],"relativePath":"Python/flask/应用设置.md","filePath":"Python/flask/应用设置.md"}'),e={name:"Python/flask/应用设置.md"},l=n(`<h1 id="应用设置" tabindex="-1">应用设置 <a class="header-anchor" href="#应用设置" aria-label="Permalink to &quot;应用设置&quot;">​</a></h1><p>一个 Flask 应用是一个 <a href="https://flask.net.cn/api.html#flask.Flask" target="_blank" rel="noreferrer"><code>Flask</code></a> 类的实例。应用的所有东西（例如配置 和 URL ）都会和这个实例一起注册。</p><p>可以在一个函数内部创建 <a href="https://flask.net.cn/api.html#flask.Flask" target="_blank" rel="noreferrer"><code>Flask</code></a> 实例来代替创建全局实例。这个函数被 称为 <em>应用工厂</em> 。所有应用相关的配置、注册和其他设置都会在函数内部完成， 然后返回这个应用。</p><h2 id="应用工厂" tabindex="-1">应用工厂 <a class="header-anchor" href="#应用工厂" aria-label="Permalink to &quot;应用工厂&quot;">​</a></h2><p>写代码的时候到了！创建 <code>flaskr</code> 文件夹并且文件夹内添加 <code>__init__.py</code> 文件。 <code>__init__.py</code> 有两个作用：一是包含应用工厂；二是 告诉 Python <code>flaskr</code> 文件夹应当视作为一个包。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create_app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(test_config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # create and configure the app</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flask(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__name__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">instance_relative_config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    app.config.from_mapping(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        SECRET_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dev&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">        DATABASE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.path.join(app.instance_path, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;flaskr.sqlite&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test_config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # load the instance config, if it exists, when not testing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        app.config.from_pyfile(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;config.py&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">silent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # load the test config if passed in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        app.config.from_mapping(test_config)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ensure the instance folder exists</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        os.makedirs(app.instance_path)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OSError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # a simple page that says hello</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @app.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Hello, World!&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app</span></span></code></pre></div><p><code>create_app</code> 是一个应用工厂函数，后面的教程中会用到。这个看似简单的函数其实 已经做了许多事情。</p><ol><li><code>app = Flask(__name__, instance_relative_config=True)</code> 创建 <a href="https://flask.net.cn/api.html#flask.Flask" target="_blank" rel="noreferrer"><code>Flask</code></a> 实例。 <ul><li><code>__name__</code> 是当前 Python 模块的名称。应用需要知道在哪里设置路径， 使用 <code>__name__</code> 是一个方便的方法。</li><li><code>instance_relative_config=True</code> 告诉应用配置文件是相对于 <a href="https://flask.net.cn/config.html#instance-folders" target="_blank" rel="noreferrer">instance folder</a> 的相对路径。实例文件夹在 <code>flaskr</code> 包的外面，用于存放本地数据（例如配置密钥和数据库），不应当 提交到版本控制系统。</li></ul></li><li><a href="https://flask.net.cn/api.html#flask.Config.from_mapping" target="_blank" rel="noreferrer"><code>app.config.from_mapping()</code></a> 设置一个应用的 缺省配置： <ul><li><a href="https://flask.net.cn/config.html#SECRET_KEY" target="_blank" rel="noreferrer"><code>SECRET_KEY</code></a> 是被 Flask 和扩展用于保证数据安全的。在开发过程中， 为了方便可以设置为 <code>&#39;dev&#39;</code> ，但是在发布的时候应当使用一个随机值来 重载它。</li><li><code>DATABASE</code> SQLite 数据库文件存放在路径。它位于 Flask 用于存放实例的 <a href="https://flask.net.cn/api.html#flask.Flask.instance_path" target="_blank" rel="noreferrer"><code>app.instance_path</code></a> 之内。下一节会更详细 地学习数据库的东西。</li></ul></li><li><a href="https://flask.net.cn/api.html#flask.Config.from_pyfile" target="_blank" rel="noreferrer"><code>app.config.from_pyfile()</code></a> 使用 <code>config.py</code> 中的值来重载缺省配置，如果 <code>config.py</code> 存在的话。 例如，当正式部署的时候，用于设置一个正式的 <code>SECRET_KEY</code> 。 <ul><li><code>test_config</code> 也会被传递给工厂，并且会替代实例配置。这样可以实现 测试和开发的配置分离，相互独立。</li></ul></li><li><a href="https://docs.python.org/3/library/os.html#os.makedirs" target="_blank" rel="noreferrer"><code>os.makedirs()</code></a> 可以确保 <a href="https://flask.net.cn/api.html#flask.Flask.instance_path" target="_blank" rel="noreferrer"><code>app.instance_path</code></a> 存在。 Flask 不会自动 创建实例文件夹，但是必须确保创建这个文件夹，因为 SQLite 数据库文件会被 保存在里面。</li><li><a href="https://flask.net.cn/api.html#flask.Flask.route" target="_blank" rel="noreferrer"><code>@app.route()</code></a> 创建一个简单的路由，这样在继续教程下面 的内容前你可以先看看应用如何运行的。它创建了 URL <code>/hello</code> 和一个函数之间 的关联。这个函数会返回一个响应，即一个 <code>&#39;Hello, World!&#39;</code> 字符串。</li></ol><h2 id="运行应用" tabindex="-1">运行应用 <a class="header-anchor" href="#运行应用" aria-label="Permalink to &quot;运行应用&quot;">​</a></h2><p>现在可以通过使用 <code>flask</code> 命令来运行应用。在终端中告诉 Flask 你的应用在哪里， 然后在开发模式下运行应用。请记住，现在还是应当在最顶层的<code>flask-tutorial</code> 目录下，不是在 <code>flaskr</code> 包里面。</p><p>开发模式下，当页面出错的时候会显示一个可以互动的调试器；当你修改代码保存的 时候会重启服务器。在学习本教程的过程中，你可以一直让它保持运行，只需要刷新 页面就可以了。</p><p>在 Windows 下，使用 <code>set</code> 代替 <code>export</code> ：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&gt; set FLASK_APP=flaskr</span></span>
<span class="line"><span>&gt; set FLASK_ENV=development</span></span>
<span class="line"><span>&gt; flask run</span></span></code></pre></div><p>可以看到类似如下输出内容：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>* Serving Flask app &quot;flaskr&quot;</span></span>
<span class="line"><span>* Environment: development</span></span>
<span class="line"><span>* Debug mode: on</span></span>
<span class="line"><span>* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span></span>
<span class="line"><span>* Restarting with stat</span></span>
<span class="line"><span>* Debugger is active!</span></span>
<span class="line"><span>* Debugger PIN: 855-212-761</span></span></code></pre></div><p>在浏览器中访问 <a href="http://127.0.0.1:5000/hello" target="_blank" rel="noreferrer">http://127.0.0.1:5000/hello</a> ，就可以看到 “Hello, World!” 信息。恭喜你， Flask 网络应用成功运行了！</p>`,16),p=[l];function t(h,k,r,o,c,d){return i(),a("div",null,p)}const f=s(e,[["render",t]]);export{E as __pageData,f as default};
