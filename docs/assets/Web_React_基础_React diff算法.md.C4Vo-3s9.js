import{_ as e,c as t,o as a,a4 as c}from"./chunks/framework.B-C7vMfR.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/React/基础/React diff算法.md","filePath":"Web/React/基础/React diff算法.md"}'),d={name:"Web/React/基础/React diff算法.md"},o=c('<h2 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h2><p>跟<code>Vue</code>一致，<code>React</code>通过引入<code>Virtual DOM</code>的概念，极大地避免无效的<code>Dom</code>操作，使我们的页面的构建效率提到了极大的提升</p><p>React diff 作为 Virtual DOM 的加速器，其算法上的改进优化是 React 整个界面渲染的基础，以及性能提高的保障，同时也是 React 源码中最神秘、最不可思议的部分，本文从源码入手，深入剖析 React diff 的不可思议之处。</p><p>React 中最值得称道的部分莫过于 Virtual DOM 与 diff 的完美结合，特别是其高效的 diff 算法，让用户可以无需顾忌性能问题而”任性自由”的刷新页面，让开发者也可以无需关心 Virtual DOM 背后的运作原理，因为 React diff 会帮助我们计算出 Virtual DOM 中真正变化的部分，并只针对该部分进行实际 DOM 操作，而非重新渲染整个页面，从而保证了每次操作更新后页面的高效渲染，因此 Virtual DOM 与 diff 是保证 React 性能口碑的幕后推手。</p><p>传统diff算法通过循环递归对节点进行依次对比，效率低下，算法复杂度达到 O(n^3)，<code>react</code>将算法进行一个优化，复杂度降为<code>O(n)</code>，两者效率差距如下图：</p><p><img src="https://static.vue-js.com/a43c9960-ec91-11eb-ab90-d9ae814b240d.png" alt="img"></p>',6),i=[o];function r(f,_,s,n,p,l){return a(),t("div",null,i)}const m=e(d,[["render",r]]);export{u as __pageData,m as default};
