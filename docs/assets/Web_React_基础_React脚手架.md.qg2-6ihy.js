import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.COET-Ywn.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/React/基础/React脚手架.md","filePath":"Web/React/基础/React脚手架.md"}'),p={name:"Web/React/基础/React脚手架.md"},h=n(`<h2 id="使用create-react-app创建react应用" tabindex="-1">使用create-react-app创建react应用 <a class="header-anchor" href="#使用create-react-app创建react应用" aria-label="Permalink to &quot;使用create-react-app创建react应用&quot;">​</a></h2><h3 id="react脚手架" tabindex="-1">react脚手架 <a class="header-anchor" href="#react脚手架" aria-label="Permalink to &quot;react脚手架&quot;">​</a></h3><ul><li><p>xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目</p></li><li><p>包含了所有需要的配置（语法检查、jsx编译、devServer…）</p></li><li><p>下载好了所有相关的依赖</p></li><li><p>可以直接运行一个简单效果</p></li><li><p>react提供了一个用于创建react项目的脚手架库: create-react-app</p></li><li><p>项目的整体技术架构为: react + webpack + es6 + eslint</p></li><li><p>使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</p></li></ul><h3 id="创建项目并启动" tabindex="-1">创建项目并启动 <a class="header-anchor" href="#创建项目并启动" aria-label="Permalink to &quot;创建项目并启动&quot;">​</a></h3><ul><li><p>第一步，全局安装：<code>npm i -g create-react-app</code></p></li><li><p>第二步，切换到想创项目的目录，使用命令：<code>npx create-react-app react-app --template typescript</code></p></li><li><p>第三步，进入项目文件夹：<code>cd hello-react</code></p></li><li><p>第四步，启动项目：<code>npm start</code></p></li></ul><h4 id="creating-a-typescript-app​" tabindex="-1">Creating a TypeScript app<a href="https://create-react-app.dev/docs/getting-started#creating-a-typescript-app" title="Direct link to heading" target="_blank" rel="noreferrer">​</a> <a class="header-anchor" href="#creating-a-typescript-app​" aria-label="Permalink to &quot;Creating a TypeScript app[​](https://create-react-app.dev/docs/getting-started#creating-a-typescript-app &quot;Direct link to heading&quot;)&quot;">​</a></h4><p>You can start a new TypeScript app using templates. To use our provided TypeScript template, append <code>--template typescript</code> to the creation command.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create-react-app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-app</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript</span></span></code></pre></div><p>If you already have a project and would like to add TypeScript, see our <a href="https://create-react-app.dev/docs/adding-typescript" target="_blank" rel="noreferrer">Adding TypeScript</a> documentation.</p><h4 id="添加代理" tabindex="-1">添加代理 <a class="header-anchor" href="#添加代理" aria-label="Permalink to &quot;添加代理&quot;">​</a></h4><p><code>create-react-app</code> 默认支持的代理功能比较简单，只需要在 <code>package.json</code> 中添加一个属性</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;proxy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000&quot;</span></span></code></pre></div><p>这样本地开发环境无法被响应的请求就会被代理到proxy的地址，用于访问我们后端的API接口。</p><h3 id="react脚手架项目结构" tabindex="-1">react脚手架项目结构 <a class="header-anchor" href="#react脚手架项目结构" aria-label="Permalink to &quot;react脚手架项目结构&quot;">​</a></h3><p>public ---- 静态资源文件夹</p><p>favicon.icon ------ 网站页签图标</p><p>index.html -------- 主页面</p><p>logo192.png ------- 192*192 logo图</p><p>logo512.png ------- 512*512 logo图</p><p>manifest.json ----- 应用加壳的配置文件</p><p>robots.txt -------- 爬虫协议文件</p><p>src ---- 源码文件夹</p><p>App.css -------- App组件的样式</p><p>App.js --------- App组件</p><p>App.test.js ---- 用于给App做测试</p><p>index.css ------ 样式</p><p>index.js ------- 入口文件</p><p>logo.svg ------- logo图</p><p>reportWebVitals.js --- 页面性能分析文件(需要web-vitals库的支持)</p><p>setupTests.js ---- 组件单元测试的文件(需要jest-dom库的支持)</p><h4 id="前端代码框架" tabindex="-1">前端代码框架 <a class="header-anchor" href="#前端代码框架" aria-label="Permalink to &quot;前端代码框架&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放浏览器标题favicon.ico、静态json数据)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放视图、工具类、image)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (与服务端对接的接口函数定义。建议视图文件夹与api文件夹相同)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (本地静态资源)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> styles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (全局样式)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> images</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (图片、svg等)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放公用全局组件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> controllers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MVC对应的controllers)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放框架国际化内容)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (框架内置国际化)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (自定义国际化)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> formI18n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (表单)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> home</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (首页)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (登录页)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (库文件，library的缩写)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放框架布局视图)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (布局公用组件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (页脚)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lockScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (锁屏)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> logo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (logo)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (主布局)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> navBars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (顶栏信息)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> breadcrumb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (面包屑、关闭全屏、菜单搜索、布局配置、用户信息、消息通知)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tagsView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (标签页)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> navMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (导航菜单)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> routerView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (路由视图出口、外链、iframe内嵌)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放模拟数据，非mock.js。用于城市多级联动)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> middlewares</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放中间件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> models</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MVC对应的models)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> router</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放路由信息)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放组件的状态vuex)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> utils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放工具类函数)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> views</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (存放页面视图,MVC对应的views)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    │</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (全局默认配置文件，无论什么环境都会加载合并)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.development</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (开发环境的配置文件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.production</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (生产环境的配置文件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .eslintignore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eslint忽略配置)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .eslintrc.js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (eslint配置)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .gitignore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (git提交忽略配置)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .prettierrc.js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prettier代码格式化配置)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CHANGELOG.md</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (框架更新日志)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> index.html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (用户页面访问入口)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LICENSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (开源许可证)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package-lock.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (npm锁定安装时的包的版本号)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (包的依赖管理配置文件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugins.d.ts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (声明文件或模块的语法)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> README.md</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (框架介绍文件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shim.d.ts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (声明文件或模块的语法)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source.d.ts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (声明文件或模块的语法)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsconfig.json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (ts配置文件)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vite.config.ts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (vite配置文件)</span></span></code></pre></div><h3 id="功能界面的组件化编码流程-通用" tabindex="-1">功能界面的组件化编码流程（通用） <a class="header-anchor" href="#功能界面的组件化编码流程-通用" aria-label="Permalink to &quot;功能界面的组件化编码流程（通用）&quot;">​</a></h3><ol><li><p>拆分组件: 拆分界面,抽取组件</p></li><li><p>实现静态组件: 使用组件实现静态页面效果</p></li><li><p>实现动态组件</p><ol><li><p>动态显示初始化数据</p><ol><li><p>数据类型</p></li><li><p>数据名称</p></li><li><p>保存在哪个组件</p></li></ol></li><li><p>交互(从绑定事件监听开始)</p></li></ol></li></ol>`,34),l=[h];function t(k,e,F,r,d,E){return a(),i("div",null,l)}const c=s(p,[["render",t]]);export{y as __pageData,c as default};
