import{_ as s,c as i,a2 as h,o as t}from"./chunks/framework.BW-ZVgUE.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/JS Math.md","filePath":"Web/JavaScript/JS Math.md"}'),n={name:"Web/JavaScript/JS Math.md"};function e(l,a,p,k,r,d){return t(),i("div",null,a[0]||(a[0]=[h(`<h3 id="令人误解的浮点" tabindex="-1">令人误解的浮点 <a class="header-anchor" href="#令人误解的浮点" aria-label="Permalink to &quot;令人误解的浮点&quot;">​</a></h3><p>JavaScript 中的数字均保存为 64 位的浮点数（Floats）。</p><p>所有编程语言，包括 JavaScript，都存在处理浮点值的困难：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y;                      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//0.30000000000000004</span></span></code></pre></div><p>请使用乘除</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//0.3</span></span></code></pre></div><h3 id="math-round" tabindex="-1">Math.round() <a class="header-anchor" href="#math-round" aria-label="Permalink to &quot;Math.round()&quot;">​</a></h3><p><code>Math.round(x)</code> 的返回值是 x 四舍五入为最接近的整数</p><h3 id="math-pow" tabindex="-1">Math.pow() <a class="header-anchor" href="#math-pow" aria-label="Permalink to &quot;Math.pow()&quot;">​</a></h3><p><code>Math.pow(x, y)</code> 的返回值是 x 的 y 次幂</p><h3 id="math-sqrt" tabindex="-1">Math.sqrt() <a class="header-anchor" href="#math-sqrt" aria-label="Permalink to &quot;Math.sqrt()&quot;">​</a></h3><p><code>Math.sqrt(x)</code> 返回 x 的平方根</p><h3 id="math-abs" tabindex="-1">Math.abs() <a class="header-anchor" href="#math-abs" aria-label="Permalink to &quot;Math.abs()&quot;">​</a></h3><p><code>Math.abs(x)</code> 返回 x 的绝对值</p><h3 id="math-ceil" tabindex="-1">Math.ceil() <a class="header-anchor" href="#math-ceil" aria-label="Permalink to &quot;Math.ceil()&quot;">​</a></h3><p><code>Math.ceil(x)</code> 的返回值是 x 上舍入最接近的整数</p><h3 id="math-floor" tabindex="-1">Math.floor() <a class="header-anchor" href="#math-floor" aria-label="Permalink to &quot;Math.floor()&quot;">​</a></h3><p><code>Math.floor(x)</code> 的返回值是 x 下舍入最接近的整数</p><h3 id="math-sin-cos-tan" tabindex="-1">Math.sin()/cos()/tan() <a class="header-anchor" href="#math-sin-cos-tan" aria-label="Permalink to &quot;Math.sin()/cos()/tan()&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 180</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 1（90 度的正弦）</span></span></code></pre></div><h3 id="math-min-max" tabindex="-1">Math.min()/max() <a class="header-anchor" href="#math-min-max" aria-label="Permalink to &quot;Math.min()/max()&quot;">​</a></h3><p>返回参数列表中最小/最大值</p><h3 id="math-random" tabindex="-1">Math.random() <a class="header-anchor" href="#math-random" aria-label="Permalink to &quot;Math.random()&quot;">​</a></h3><p><code>Math.random()</code> 返回介于 0（包括） 与 1（不包括） 之间的随机数</p><h3 id="math-log" tabindex="-1">Math.log() <a class="header-anchor" href="#math-log" aria-label="Permalink to &quot;Math.log()&quot;">​</a></h3><p><code>log()</code> 方法返回数字的自然对数（以 E 为底）</p><h3 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-label="Permalink to &quot;常量&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">E</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 返回欧拉指数（Euler&#39;s number）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PI</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 返回圆周率（PI）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SQRT2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 返回 2 的平方根</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SQRT1_2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 返回 1/2 的平方根</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LN2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 返回 2 的自然对数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LN10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 返回 10 的自然对数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LOG2E</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 返回以 2 为底的 e 的对数（约等于 1.414）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Math.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LOG10E</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // 返回以 10 为底的 e 的对数（约等于 0.434）</span></span></code></pre></div><h2 id="数字方法" tabindex="-1">数字方法 <a class="header-anchor" href="#数字方法" aria-label="Permalink to &quot;数字方法&quot;">​</a></h2><h3 id="toexponential-方法" tabindex="-1">toExponential() 方法 <a class="header-anchor" href="#toexponential-方法" aria-label="Permalink to &quot;toExponential() 方法&quot;">​</a></h3><p><code>toExponential()</code> 返回字符串值，它包含已被四舍五入并使用指数计数法的数字,参数定义小数点后的字符数。</p><h3 id="tofixed-方法" tabindex="-1">toFixed() 方法 <a class="header-anchor" href="#tofixed-方法" aria-label="Permalink to &quot;toFixed() 方法&quot;">​</a></h3><p><code>toFixed()</code> 返回字符串值，它包含了指定位数小数的数字</p><h3 id="toprecision-方法" tabindex="-1">toPrecision() 方法 <a class="header-anchor" href="#toprecision-方法" aria-label="Permalink to &quot;toPrecision() 方法&quot;">​</a></h3><p><code>toPrecision()</code> 返回字符串值，它包含了指定长度的数字</p><h3 id="parseint-方法" tabindex="-1">parseInt() 方法 <a class="header-anchor" href="#parseint-方法" aria-label="Permalink to &quot;parseInt() 方法&quot;">​</a></h3><p><code>parseInt()</code> 解析一段字符串并返回数值。允许空格。只返回首个数字</p><h3 id="parsefloat-方法" tabindex="-1">parseFloat() 方法 <a class="header-anchor" href="#parsefloat-方法" aria-label="Permalink to &quot;parseFloat() 方法&quot;">​</a></h3><p><code>parseFloat()</code> 解析一段字符串并返回数值。允许空格。只返回首个数字</p><h3 id="常量-1" tabindex="-1">常量 <a class="header-anchor" href="#常量-1" aria-label="Permalink to &quot;常量&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MAX_VALUE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //返回 JavaScript 中可能的最大数字。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MIN_VALUE</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //返回 JavaScript 中可能的最小数字。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.POSITIVE_INFINITY</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//正无穷</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.NEGATIVE_INFINITY</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//负无穷</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Number.NaN</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//非数字</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">实例</span></span></code></pre></div>`,41)]))}const E=s(n,[["render",e]]);export{c as __pageData,E as default};
