import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.COET-Ywn.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/JS Let和Const.md","filePath":"Web/JavaScript/JS Let和Const.md"}'),l={name:"Web/JavaScript/JS Let和Const.md"},n=t(`<h2 id="let和const" tabindex="-1">let和const <a class="header-anchor" href="#let和const" aria-label="Permalink to &quot;let和const&quot;">​</a></h2><p>默认使用 const，只有当确实需要改变变量的值的时候才使用 let。这是因为大部分的变量的值在初始化后不应再改变，而预料之外的变量的修改是很多 bug 的源头。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bad</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// good</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// better</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;bar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="块作用域" tabindex="-1">块作用域 <a class="header-anchor" href="#块作用域" aria-label="Permalink to &quot;块作用域&quot;">​</a></h2><ul><li><p>通过 var 关键词声明的变量没有块作用域。</p></li><li><p>在块 {} 内声明的变量可以从块之外进行访问。</p></li><li><p>通过 var 关键词定义的全局变量属于 window 对象，可以用<code>window.</code>访问</p></li><li><p>允许在程序的任何位置使用 var 重新声明 JavaScript 变量</p></li><li><p>使用 let 关键字重新声明变量可以解决这个问题。</p></li><li><p>在块中重新声明变量不会重新声明块外的变量</p></li><li><p>在块作用域内使用 const 声明的变量与 let 变量相似。</p></li><li><p>const 变量必须在声明时赋值</p></li><li><p>您可以更改、添加常量对象的属性，但是您无法重新为常量对象赋值</p></li><li><p>您可以更改常量数组的元素，但是您无法重新为常量数组赋值</p></li></ul><h2 id="提升" tabindex="-1">提升 <a class="header-anchor" href="#提升" aria-label="Permalink to &quot;提升&quot;">​</a></h2><ul><li>通过 var 声明的变量会提升到顶端。</li></ul><p>您可以在声明变量之前就使用它：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在声明之前，您可以使用 carName</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Name;</span></span></code></pre></div><ul><li>通过 let 定义的变量不会被提升到顶端。</li></ul><p>在声明 let 变量之前就使用它会导致 ReferenceError。</p><p>变量从块的开头一直处于“暂时死区”，直到声明为止：</p><ul><li>通过 const 定义的变量不会被提升到顶端。</li></ul><p>const 变量不能在声明之前使用</p>`,14),e=[n];function p(h,r,o,k,c,d){return a(),i("div",null,e)}const E=s(l,[["render",p]]);export{u as __pageData,E as default};
