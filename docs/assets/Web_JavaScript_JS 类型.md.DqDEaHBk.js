import{_ as t,c as i,o as s,a4 as d}from"./chunks/framework.B-C7vMfR.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/JS 类型.md","filePath":"Web/JavaScript/JS 类型.md"}'),a={name:"Web/JavaScript/JS 类型.md"},n=d(`<h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-label="Permalink to &quot;类型&quot;">​</a></h2><p>在 JavaScript 中</p><p>有 5 种不同的可以包含值的数据类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>object</li><li>function</li></ul><p>有 6 种类型的对象：</p><ul><li>Object</li><li>Date</li><li>Array</li><li>String</li><li>Number</li><li>Boolean</li></ul><p>以及 2 种不能包含值的数据类型：</p><ul><li>null</li><li>undefined</li></ul><h3 id="constructor-属性" tabindex="-1">constructor 属性 <a class="header-anchor" href="#constructor-属性" aria-label="Permalink to &quot;constructor 属性&quot;">​</a></h3><p><code>constructor</code> 属性返回所有 JavaScript 变量的构造函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 返回 function String()  {[native code]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 返回 function Number()  {[native code]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">false.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // 返回 function Boolean() {[native code]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // 返回 function Array()   {[native code]}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bill&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 返回 function Object()  {[native code]}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 返回 function Date()    {[native code]}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 返回 function Function(){[native code]}</span></span></code></pre></div><h2 id="类型转换" tabindex="-1">类型转换 <a class="header-anchor" href="#类型转换" aria-label="Permalink to &quot;类型转换&quot;">​</a></h2><p>JavaScript 类型转换表</p><p>下表中列出了将不同 JavaScript 值转换为数字、字符串和布尔的结果：</p><table><thead><tr><th>原始值</th><th>转换为数字</th><th>转换为字符串</th><th>转换为逻辑</th></tr></thead><tbody><tr><td>false</td><td>0</td><td>&quot;false&quot;</td><td>false</td></tr><tr><td>true</td><td>1</td><td>&quot;true&quot;</td><td>true</td></tr><tr><td>0</td><td>0</td><td>&quot;0&quot;</td><td>false</td></tr><tr><td>1</td><td>1</td><td>&quot;1&quot;</td><td>true</td></tr><tr><td>&quot;0&quot;</td><td>0</td><td>&quot;0&quot;</td><td>true</td></tr><tr><td>&quot;000&quot;</td><td>0</td><td>&quot;000&quot;</td><td>true</td></tr><tr><td>&quot;1&quot;</td><td>1</td><td>&quot;1&quot;</td><td>true</td></tr><tr><td>NaN</td><td>NaN</td><td>&quot;NaN&quot;</td><td>false</td></tr><tr><td>Infinity</td><td>Infinity</td><td>&quot;Infinity&quot;</td><td>true</td></tr><tr><td>-Infinity</td><td>-Infinity</td><td>&quot;-Infinity&quot;</td><td>true</td></tr><tr><td>&quot;&quot;</td><td>0</td><td>&quot;&quot;</td><td>false</td></tr><tr><td>&quot;20&quot;</td><td>20</td><td>&quot;20&quot;</td><td>true</td></tr><tr><td>&quot;twenty&quot;</td><td>NaN</td><td>&quot;twenty&quot;</td><td>true</td></tr><tr><td>[ ]</td><td>0</td><td>&quot;&quot;</td><td>true</td></tr><tr><td>[20]</td><td>20</td><td>&quot;20&quot;</td><td>true</td></tr><tr><td>[10,20]</td><td>NaN</td><td>&quot;10,20&quot;</td><td>true</td></tr><tr><td>[&quot;twenty&quot;]</td><td>NaN</td><td>&quot;twenty&quot;</td><td>true</td></tr><tr><td>[&quot;ten&quot;,&quot;twenty&quot;]</td><td>NaN</td><td>&quot;ten,twenty&quot;</td><td>true</td></tr><tr><td><code>function(){}</code></td><td>NaN</td><td>&quot;<code>function(){}</code>&quot;</td><td>true</td></tr><tr><td></td><td>NaN</td><td>&quot;[object Object]&quot;</td><td>true</td></tr><tr><td>null</td><td>0</td><td>&quot;null&quot;</td><td>false</td></tr><tr><td>undefined</td><td>NaN</td><td>&quot;undefined&quot;</td><td>false</td></tr></tbody></table>`,15),e=[n];function l(r,h,o,p,k,u){return s(),i("div",null,e)}const E=t(a,[["render",l]]);export{q as __pageData,E as default};
