import{_ as a,c as i,o as s,a4 as n}from"./chunks/framework.B-C7vMfR.js";const E=JSON.parse('{"title":"配置（Configuration）","description":"","frontmatter":{},"headers":[],"relativePath":"Web/Webpack/概念/configuration.md","filePath":"Web/Webpack/概念/configuration.md"}'),e={name:"Web/Webpack/概念/configuration.md"},t=n(`<h1 id="配置-configuration" tabindex="-1">配置（Configuration） <a class="header-anchor" href="#配置-configuration" aria-label="Permalink to &quot;配置（Configuration）&quot;">​</a></h1><p>你可能已经注意到，很少有 webpack 配置看起来完全相同。这是因为 <strong>webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack <a href="https://webpack.docschina.org/configuration/" target="_blank" rel="noreferrer">配置的对象</a>。</strong> webpack 会根据该配置定义的属性进行处理。</p><p>由于 webpack 遵循 CommonJS 模块规范，因此，你<strong>可以在配置中使用</strong>：</p><ul><li>通过 <code>require(...)</code> 引入其他文件</li><li>通过 <code>require(...)</code> 使用 npm 下载的工具函数</li><li>使用 JavaScript 控制流表达式，例如 <code>?:</code> 操作符</li><li>对 value 使用常量或变量赋值</li><li>编写并执行函数，生成部分配置</li></ul><p>请在合适的场景，使用这些功能。</p><p>虽然技术上可行，<strong>但还是应避免如下操作</strong>：</p><ul><li>当使用 webpack CLI 工具时，访问 CLI 参数（应编写自己的 CLI 工具替代，或者<a href="https://webpack.docschina.org/api/cli/#env" target="_blank" rel="noreferrer">使用 <code>--env</code></a>）</li><li>导出不确定的结果（两次调用 webpack 应产生相同的输出文件）</li><li>编写超长的配置（应将配置文件拆分成多个）</li></ul><h2 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to &quot;基本配置&quot;">​</a></h2><p><strong>webpack.config.js</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;path&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;development&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  entry: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./foo.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(__dirname, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    filename: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo.bundle.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>查看：<a href="https://webpack.docschina.org/configuration/" target="_blank" rel="noreferrer">配置章节</a>中所有支持的配置选项。</p><h2 id="多个-target" tabindex="-1">多个 target <a class="header-anchor" href="#多个-target" aria-label="Permalink to &quot;多个 target&quot;">​</a></h2><p>除了可以将单个配置导出为 object，<a href="https://webpack.docschina.org/configuration/configuration-types/#exporting-a-function" target="_blank" rel="noreferrer">function</a> 或 <a href="https://webpack.docschina.org/configuration/configuration-types/#exporting-a-promise" target="_blank" rel="noreferrer">Promise</a> 以外，还可以将其导出为多个配置。</p><p>查看：<a href="https://webpack.docschina.org/configuration/configuration-types/#exporting-multiple-configurations" target="_blank" rel="noreferrer">导出多个配置</a></p><h2 id="使用其它配置语言" tabindex="-1">使用其它配置语言 <a class="header-anchor" href="#使用其它配置语言" aria-label="Permalink to &quot;使用其它配置语言&quot;">​</a></h2><p>Webpack 支持由多种编程和数据语言编写的配置文件。</p><p>查看：<a href="https://webpack.docschina.org/configuration/configuration-languages/" target="_blank" rel="noreferrer">配置语言</a></p>`,17),r=[t];function p(l,h,o,k,c,g){return s(),i("div",null,r)}const u=a(e,[["render",p]]);export{E as __pageData,u as default};
