import{_ as l,E as h,c as p,J as a,w as n,m as s,a as t,a4 as k,o as e}from"./chunks/framework.B-C7vMfR.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Design Patterns/策略模式.md","filePath":"Design Patterns/策略模式.md"}'),r={name:"Design Patterns/策略模式.md"},E=s("h2",{id:"策略模式",tabindex:"-1"},[t("策略模式 "),s("a",{class:"header-anchor",href:"#策略模式","aria-label":'Permalink to "策略模式"'},"​")],-1),g=s("p",null,"策略模式（Strategy pattern）是一种行为设计模式， 它能让你定义一系列算法， 并将每种算法分别放入独立的类中， 以使算法的对象能够相互替换。",-1),d=s("img",{src:"https://refactoringguru.cn/images/patterns/content/strategy/strategy-comic-1-zh.png"},null,-1),y=s("p",null,"假如你需要前往机场。 你可以选择乘坐公共汽车、 预约出租车或骑自行车。 这些就是你的出行策略。 你可以根据预算或时间等因素来选择其中一种策略。",-1),F=s("h3",{id:"策略模式结构",tabindex:"-1"},[t("策略模式结构 "),s("a",{class:"header-anchor",href:"#策略模式结构","aria-label":'Permalink to "策略模式结构"'},"​")],-1),c=s("img",{src:"https://refactoringguru.cn/images/patterns/diagrams/strategy/structure-indexed.png"},null,-1),o=k("",7);function A(C,D,B,u,_,m){const i=h("center");return e(),p("div",null,[E,g,a(i,null,{default:n(()=>[d]),_:1}),a(i,null,{default:n(()=>[t("各种前往机场的出行策略")]),_:1}),y,F,a(i,null,{default:n(()=>[c]),_:1}),o])}const b=l(r,[["render",A]]);export{x as __pageData,b as default};
