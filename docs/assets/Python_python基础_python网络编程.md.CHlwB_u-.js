import{_ as t,c as s,o as i,a4 as a}from"./chunks/framework.B-C7vMfR.js";const c=JSON.parse('{"title":"Python3 网络编程","description":"","frontmatter":{},"headers":[],"relativePath":"Python/python基础/python网络编程.md","filePath":"Python/python基础/python网络编程.md"}'),e={name:"Python/python基础/python网络编程.md"},l=a(`<h1 id="python3-网络编程" tabindex="-1">Python3 网络编程 <a class="header-anchor" href="#python3-网络编程" aria-label="Permalink to &quot;Python3 网络编程&quot;">​</a></h1><p>Python 提供了两个级别访问的网络服务。：</p><ul><li>低级别的网络服务支持基本的 Socket，它提供了标准的 BSD Sockets API，可以访问底层操作系统Socket接口的全部方法。</li><li>高级别的网络服务模块 SocketServer， 它提供了服务器中心类，可以简化网络服务器的开发。</li></ul><h2 id="什么是-socket" tabindex="-1">什么是 Socket? <a class="header-anchor" href="#什么是-socket" aria-label="Permalink to &quot;什么是 Socket?&quot;">​</a></h2><p>Socket又称&quot;套接字&quot;，应用程序通常通过&quot;套接字&quot;向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p><h2 id="socket-函数" tabindex="-1">socket()函数 <a class="header-anchor" href="#socket-函数" aria-label="Permalink to &quot;socket()函数&quot;">​</a></h2><p>Python 中，我们用 socket() 函数来创建套接字，语法格式如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">socket.socket([family[, type[, proto]]])</span></span></code></pre></div><h3 id="参数" tabindex="-1">参数 <a class="header-anchor" href="#参数" aria-label="Permalink to &quot;参数&quot;">​</a></h3><ul><li>family: 套接字家族可以是 AF_UNIX 或者 AF_INET</li><li>type: 套接字类型可以根据是面向连接的还是非连接分为<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code></li><li>proto: 一般不填默认为0.</li></ul><h3 id="socket-对象-内建-方法" tabindex="-1">Socket 对象(内建)方法 <a class="header-anchor" href="#socket-对象-内建-方法" aria-label="Permalink to &quot;Socket 对象(内建)方法&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">函数</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">服务器端套接字</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">s.bind()</td><td style="text-align:left;">绑定地址（host,port）到套接字， 在AF_INET下,以元组（host,port）的形式表示地址。</td></tr><tr><td style="text-align:left;">s.listen()</td><td style="text-align:left;">开始TCP监听。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为1，大部分应用程序设为5就可以了。</td></tr><tr><td style="text-align:left;">s.accept()</td><td style="text-align:left;">被动接受TCP客户端连接,(阻塞式)等待连接的到来</td></tr><tr><td style="text-align:left;">客户端套接字</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">s.connect()</td><td style="text-align:left;">主动初始化TCP服务器连接，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td></tr><tr><td style="text-align:left;">s.connect_ex()</td><td style="text-align:left;">connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td></tr><tr><td style="text-align:left;">公共用途的套接字函数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">s.recv()</td><td style="text-align:left;">接收TCP数据，数据以字符串形式返回，bufsize指定要接收的最大数据量。flag提供有关消息的其他信息，通常可以忽略。</td></tr><tr><td style="text-align:left;">s.send()</td><td style="text-align:left;">发送TCP数据，将string中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于string的字节大小。</td></tr><tr><td style="text-align:left;">s.sendall()</td><td style="text-align:left;">完整发送TCP数据。将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回None，失败则抛出异常。</td></tr><tr><td style="text-align:left;">s.recvfrom()</td><td style="text-align:left;">接收UDP数据，与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</td></tr><tr><td style="text-align:left;">s.sendto()</td><td style="text-align:left;">发送UDP数据，将数据发送到套接字，address是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td></tr><tr><td style="text-align:left;">s.close()</td><td style="text-align:left;">关闭套接字</td></tr><tr><td style="text-align:left;">s.getpeername()</td><td style="text-align:left;">返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td></tr><tr><td style="text-align:left;">s.getsockname()</td><td style="text-align:left;">返回套接字自己的地址。通常是一个元组(ipaddr,port)</td></tr><tr><td style="text-align:left;">s.setsockopt(level,optname,value)</td><td style="text-align:left;">设置给定套接字选项的值。</td></tr><tr><td style="text-align:left;">s.getsockopt(level,optname[.buflen])</td><td style="text-align:left;">返回套接字选项的值。</td></tr><tr><td style="text-align:left;">s.settimeout(timeout)</td><td style="text-align:left;">设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td></tr><tr><td style="text-align:left;">s.gettimeout()</td><td style="text-align:left;">返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td></tr><tr><td style="text-align:left;">s.fileno()</td><td style="text-align:left;">返回套接字的文件描述符。</td></tr><tr><td style="text-align:left;">s.setblocking(flag)</td><td style="text-align:left;">如果 flag 为 False，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用 recv() 没有发现任何数据，或 send() 调用无法立即发送数据，那么将引起 socket.error 异常。</td></tr><tr><td style="text-align:left;">s.makefile()</td><td style="text-align:left;">创建一个与该套接字相关连的文件</td></tr></tbody></table><h2 id="简单实例" tabindex="-1">简单实例 <a class="header-anchor" href="#简单实例" aria-label="Permalink to &quot;简单实例&quot;">​</a></h2><h3 id="服务端" tabindex="-1">服务端 <a class="header-anchor" href="#服务端" aria-label="Permalink to &quot;服务端&quot;">​</a></h3><p>我们使用 socket 模块的 <strong>socket</strong> 函数来创建一个 socket 对象。socket 对象可以通过调用其他函数来设置一个 socket 服务。</p><p>现在我们可以通过调用 <strong>bind(hostname, port)</strong> 函数来指定服务的 <em>port(端口)</em>。</p><p>接着，我们调用 socket 对象的 <em>accept</em> 方法。该方法等待客户端的连接，并返回 <em>connection</em> 对象，表示已连接到客户端。</p><p>完整代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/python3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件名：server.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入 socket、sys 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 socket 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serversocket </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_STREAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取本地主机名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.gethostname()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9999</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绑定端口号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serversocket.bind((host, port))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置最大连接数，超过后排队</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">serversocket.listen(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 建立客户端连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientsocket,addr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> serversocket.accept()      </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;连接地址: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(addr))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;欢迎访问菜鸟教程！&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientsocket.send(msg.encode(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    clientsocket.close()</span></span></code></pre></div><h3 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h3><p>接下来我们写一个简单的客户端实例连接到以上创建的服务。端口号为 9999。</p><p><strong>socket.connect(hostname, port )</strong> 方法打开一个 TCP 连接到主机为 <em>hostname</em> 端口为 <em>port</em> 的服务商。连接后我们就可以从服务端获取数据，记住，操作完成后需要关闭连接。</p><p>完整代码如下：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/usr/bin/python3</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件名：client.py</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 导入 socket、sys 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sys</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建 socket 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.socket(socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AF_INET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, socket.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SOCK_STREAM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取本地主机名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> socket.gethostname()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 设置端口号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9999</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 连接服务，指定主机和端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.connect((host, port))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 接收小于 1024 字节的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.recv(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s.close()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (msg.decode(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>现在我们打开两个终端，第一个终端执行 server.py 文件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> python server.py</span></span></code></pre></div><p>第二个终端执行 client.py 文件：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> python client.py </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">欢迎访问菜鸟教程！</span></span></code></pre></div><p>这时我们再打开第一个终端，就会看到有以下信息输出：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">连接地址： (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.0.118&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">33397</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><hr><h2 id="python-internet-模块" tabindex="-1">Python Internet 模块 <a class="header-anchor" href="#python-internet-模块" aria-label="Permalink to &quot;Python Internet 模块&quot;">​</a></h2><p>以下列出了 Python 网络编程的一些重要模块：</p><table><thead><tr><th style="text-align:left;">协议</th><th style="text-align:left;">功能用处</th><th style="text-align:left;">端口号</th><th style="text-align:left;">Python 模块</th></tr></thead><tbody><tr><td style="text-align:left;">HTTP</td><td style="text-align:left;">网页访问</td><td style="text-align:left;">80</td><td style="text-align:left;">httplib, urllib, xmlrpclib</td></tr><tr><td style="text-align:left;">NNTP</td><td style="text-align:left;">阅读和张贴新闻文章，俗称为&quot;帖子&quot;</td><td style="text-align:left;">119</td><td style="text-align:left;">nntplib</td></tr><tr><td style="text-align:left;">FTP</td><td style="text-align:left;">文件传输</td><td style="text-align:left;">20</td><td style="text-align:left;">ftplib, urllib</td></tr><tr><td style="text-align:left;">SMTP</td><td style="text-align:left;">发送邮件</td><td style="text-align:left;">25</td><td style="text-align:left;">smtplib</td></tr><tr><td style="text-align:left;">POP3</td><td style="text-align:left;">接收邮件</td><td style="text-align:left;">110</td><td style="text-align:left;">poplib</td></tr><tr><td style="text-align:left;">IMAP4</td><td style="text-align:left;">获取邮件</td><td style="text-align:left;">143</td><td style="text-align:left;">imaplib</td></tr><tr><td style="text-align:left;">Telnet</td><td style="text-align:left;">命令行</td><td style="text-align:left;">23</td><td style="text-align:left;">telnetlib</td></tr><tr><td style="text-align:left;">Gopher</td><td style="text-align:left;">信息查找</td><td style="text-align:left;">70</td><td style="text-align:left;">gopherlib, urllib</td></tr></tbody></table><p>更多内容可以参阅官网的 <a href="https://docs.python.org/3.0/library/socket.html" target="_blank" rel="noreferrer">Python Socket Library and Modules</a>。</p>`,35),n=[l];function p(h,k,d,r,o,y){return i(),s("div",null,n)}const E=t(e,[["render",p]]);export{c as __pageData,E as default};
