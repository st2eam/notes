import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.BtCE5x9j.js";const E=JSON.parse('{"title":"Node.js基础","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/Node.js/Node.js.md","filePath":"Web/JavaScript/Node.js/Node.js.md"}'),t={name:"Web/JavaScript/Node.js/Node.js.md"},p=e(`<h1 id="node-js基础" tabindex="-1">Node.js基础 <a class="header-anchor" href="#node-js基础" aria-label="Permalink to &quot;Node.js基础&quot;">​</a></h1><p><a href="https://nodejs.org/dist/latest/docs/api/" target="_blank" rel="noreferrer">Node.js v18.4.0 Documentation</a></p><p>简单的说 Node.js 就是运行在服务端的 JavaScript。</p><p>Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。</p><p>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。</p><h3 id="node-的特点" tabindex="-1">Node 的特点 <a class="header-anchor" href="#node-的特点" aria-label="Permalink to &quot;Node 的特点&quot;">​</a></h3><p>作为后端JavaScript的运行平台，Node保留了前端浏览器JavaScript中那些熟悉的接口，没有改写语言本身的任何特性，依旧基于作用域和原型链，区别在于它将前端中广泛运用的思想迁移到了服务器端。</p><h3 id="使用-supervisor" tabindex="-1">使用 supervisor <a class="header-anchor" href="#使用-supervisor" aria-label="Permalink to &quot;使用 supervisor&quot;">​</a></h3><p>我们在开发过程中总是希望修改后立即看到效果，而不是每次都要终止进程并重启。 supervisor 可以帮助你实现这个功能，它会监视你对代码的改动，并自动重启 Node.js。 使用方法很简单，首先使用 npm 安装 supervisor：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> supervisor</span></span></code></pre></div><p>然后supervisor 命令启动 app.js</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">supervisor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.js</span></span></code></pre></div><p>supervisor 这个小工具可以解决开发中的调试问题。</p><h2 id="使用typescript" tabindex="-1">使用TypeScript <a class="header-anchor" href="#使用typescript" aria-label="Permalink to &quot;使用TypeScript&quot;">​</a></h2><p>使用TS来编写Node.js程序的关键是安装对应的类型提示模块，我们首先通过 <code>npm init</code> 初始化一个空的npm工程，然后通过下面的命令来安装类型依赖</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div><p><code>@types/node</code> 就是Node.js的类型提示模块，安装之后TS就可以识别Node.js中的API和数据类型了。然后我们需要创建一个 <code>tsconfig.json</code> 文件，用来告诉TS如何编译我们的代码，最关键的一个选项是将模块类型转换为 <code>commonjs</code>，如下是一个非常基本的配置选项。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;commonjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esnext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;skipLibCheck&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;sourceMap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;include&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;src/**/*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>因为历史原因，Node.js最早是支持 <code>CommonJS</code> 模块规范的，后来随着 <code>ES Modules</code> 的发展Node.js也提供了支持，但是目前两者的兼容还存在很多问题，为了更好的兼容性，我们建议目前还是转换成 <code>CommonJS</code> 模块来执行，当然，TS会帮我们自动完成这个工作，我们还是直接使用 <code>ES Modules</code> 即可。</p><p>完成上面的配置后，我们可以把TS源代码放在 <code>src</code> 目录中，通过执行 <code>tsc</code> 命令即可编译输出JS文件到 <code>dist</code> 目录。</p>`,20),n=[p];function o(h,l,d,r,k,c){return a(),i("div",null,n)}const g=s(t,[["render",o]]);export{E as __pageData,g as default};
