import{_ as e,c as s,o as i,a4 as a}from"./chunks/framework.BtCE5x9j.js";const g=JSON.parse('{"title":"Context(上下文)","description":"","frontmatter":{},"headers":[],"relativePath":"Web/koa/koa 上下文.md","filePath":"Web/koa/koa 上下文.md"}'),t={name:"Web/koa/koa 上下文.md"},o=a(`<h1 id="context-上下文" tabindex="-1">Context(上下文) <a class="header-anchor" href="#context-上下文" aria-label="Permalink to &quot;Context(上下文)&quot;">​</a></h1><p>Koa Context 将 node 的 <code>request</code> 和 <code>response</code> 对象封装在一个单独的对象里面，其为编写 web 应用和 API 提供了很多有用的方法。 这些操作在 HTTP 服务器开发中经常使用，因此其被添加在上下文这一层，而不是更高层框架中，因此将迫使中间件需要重新实现这些常用方法。</p><p><code>context</code> 在每个 request 请求中被创建，在中间件中作为接收器(receiver)来引用，或者通过 <code>this</code> 标识符来引用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// is the Context</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.request; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// is a koa Request</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.response; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// is a koa Response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>许多 context 的访问器和方法为了便于访问和调用，简单的委托给他们的 <code>ctx.request</code> 和 <code>ctx.response</code> 所对应的等价方法， 比如说 <code>ctx.type</code> 和 <code>ctx.length</code> 代理了 <code>response</code> 对象中对应的方法，<code>ctx.path</code> 和 <code>ctx.method</code> 代理了 <code>request</code> 对象中对应的方法。</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><p><code>Context</code> 详细的方法和访问器。</p><h3 id="ctx-req" tabindex="-1">ctx.req <a class="header-anchor" href="#ctx-req" aria-label="Permalink to &quot;ctx.req&quot;">​</a></h3><p>Node 的 <code>request</code> 对象。</p><h3 id="ctx-res" tabindex="-1">ctx.res <a class="header-anchor" href="#ctx-res" aria-label="Permalink to &quot;ctx.res&quot;">​</a></h3><p>Node 的 <code>response</code> 对象。</p><p>Koa <em>不支持</em> 直接调用底层 res 进行响应处理。请避免使用以下 node 属性：</p><ul><li><code>res.statusCode</code></li><li><code>res.writeHead()</code></li><li><code>res.write()</code></li><li><code>res.end()</code></li></ul><h3 id="ctx-request" tabindex="-1">ctx.request <a class="header-anchor" href="#ctx-request" aria-label="Permalink to &quot;ctx.request&quot;">​</a></h3><p>Koa 的 <code>Request</code> 对象。</p><h3 id="ctx-response" tabindex="-1">ctx.response <a class="header-anchor" href="#ctx-response" aria-label="Permalink to &quot;ctx.response&quot;">​</a></h3><p>Koa 的 <code>Response</code> 对象。</p><h3 id="ctx-state" tabindex="-1">ctx.state <a class="header-anchor" href="#ctx-state" aria-label="Permalink to &quot;ctx.state&quot;">​</a></h3><p>推荐的命名空间，用于通过中间件传递信息到前端视图</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.state.user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id);</span></span></code></pre></div><h3 id="ctx-app" tabindex="-1">ctx.app <a class="header-anchor" href="#ctx-app" aria-label="Permalink to &quot;ctx.app&quot;">​</a></h3><p>应用实例引用。</p><h3 id="ctx-cookies-get-name-options" tabindex="-1">ctx.cookies.get(name, [options]) <a class="header-anchor" href="#ctx-cookies-get-name-options" aria-label="Permalink to &quot;ctx.cookies.get(name, [options])&quot;">​</a></h3><p>获得 cookie 中名为 <code>name</code> 的值，<code>options</code> 为可选参数：</p><ul><li><code>signed</code> 如果为 true，表示请求时 cookie 需要进行签名。</li></ul><p>注意：Koa 使用了 Express 的 <a href="https://github.com/jed/cookies" target="_blank" rel="noreferrer">cookies</a> 模块，options 参数只是简单地直接进行传递。</p><h3 id="ctx-cookies-set-name-value-options" tabindex="-1">ctx.cookies.set(name, value, [options]) <a class="header-anchor" href="#ctx-cookies-set-name-value-options" aria-label="Permalink to &quot;ctx.cookies.set(name, value, [options])&quot;">​</a></h3><p>设置 cookie 中名为 <code>name</code> 的值，<code>options</code> 为可选参数：</p><ul><li><code>maxAge</code> 一个数字，表示 Date.now()到期的毫秒数</li><li><code>signed</code> 是否要做签名</li><li><code>expires</code> cookie有效期</li><li><code>path</code>cookie 的路径，默认为 <code>/&#39;</code></li><li><code>domain</code> cookie 的域</li><li><code>secure</code> false 表示 cookie 通过 HTTP 协议发送，true 表示 cookie 通过 HTTPS 发送。</li><li><code>httpOnly</code> true 表示 cookie 只能通过 HTTP 协议发送</li><li><code>overwrite</code> 一个布尔值，表示是否覆盖以前设置的同名的Cookie（默认为false）。 如果为true，在设置此cookie时，将在同一请求中使用相同名称（不管路径或域）设置的所有Cookie将从Set-Cookie头部中过滤掉。</li></ul><p>注意：Koa 使用了 Express 的 <a href="https://github.com/jed/cookies" target="_blank" rel="noreferrer">cookies</a> 模块，options 参数只是简单地直接进行传递。</p><h3 id="ctx-throw-status-msg-properties" tabindex="-1">ctx.throw([status], [msg], [properties]) <a class="header-anchor" href="#ctx-throw-status-msg-properties" aria-label="Permalink to &quot;ctx.throw([status], [msg], [properties])&quot;">​</a></h3><p>抛出包含 <code>.status</code> 属性的错误，默认为 <code>500</code>。该方法可以让 Koa 准确的响应处理状态。 Koa支持以下组合：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name required&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name required&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { user: user });</span></span></code></pre></div><p><code>this.throw(&#39;name required&#39;, 400)</code> 等价于：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> err</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name required&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">err.expose </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> err;</span></span></code></pre></div><p>注意：这些用户级错误被标记为 <code>err.expose</code>，其意味着这些消息被准确描述为对客户端的响应，而并非使用在您不想泄露失败细节的场景中。</p><p>您可以选择传递一个属性对象，该对象被合并到错误中，这对装饰机器友好错误非常有用，并且这些错误会被报给上层请求。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">throw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;access_denied&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { user: user });</span></span></code></pre></div><p>koa用 <a href="https://github.com/jshttp/http-errors" target="_blank" rel="noreferrer">http-errors</a>来创建错误。</p><h3 id="ctx-assert-value-status-msg-properties" tabindex="-1">ctx.assert(value, [status], [msg], [properties]) <a class="header-anchor" href="#ctx-assert-value-status-msg-properties" aria-label="Permalink to &quot;ctx.assert(value, [status], [msg], [properties])&quot;">​</a></h3><p>当<code>!value</code>时， Helper 方法抛出一个类似<code>.throw()</code>的错误。 类似node&#39;s <a href="http://nodejs.org/api/assert.html" target="_blank" rel="noreferrer">assert()</a> 方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx.state.user, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">401</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;User not found. Please login!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>koa 使用 <a href="https://github.com/jshttp/http-assert" target="_blank" rel="noreferrer">http-assert</a> 来断言。</p><h3 id="ctx-respond" tabindex="-1">ctx.respond <a class="header-anchor" href="#ctx-respond" aria-label="Permalink to &quot;ctx.respond&quot;">​</a></h3><p>为了避免使用 Koa 的内置响应处理功能，您可以直接赋值 <code>this.repond = false;</code>。如果您不想让 Koa 来帮助您处理 reponse，而是直接操作原生 <code>res</code> 对象，那么请使用这种方法。</p><p>注意： 这种方式是不被 Koa 支持的。其可能会破坏 Koa 中间件和 Koa 本身的一些功能。其只作为一种 hack 的方式，并只对那些想要在 Koa 方法和中间件中使用传统 <code>fn(req, res)</code> 方法的人来说会带来便利。</p><h2 id="request-aliases" tabindex="-1">Request aliases <a class="header-anchor" href="#request-aliases" aria-label="Permalink to &quot;Request aliases&quot;">​</a></h2><p>以下访问器和别名与 <a href="https://www.koajs.com.cn/#request" target="_blank" rel="noreferrer">Request</a> 等价：</p><ul><li><code>ctx.header</code></li><li><code>ctx.headers</code></li><li><code>ctx.method</code></li><li><code>ctx.method=</code></li><li><code>ctx.url</code></li><li><code>ctx.url=</code></li><li><code>ctx.originalUrl</code></li><li><code>ctx.origin</code></li><li><code>ctx.href</code></li><li><code>ctx.path</code></li><li><code>ctx.path=</code></li><li><code>ctx.query</code></li><li><code>ctx.query=</code></li><li><code>ctx.querystring</code></li><li><code>ctx.querystring=</code></li><li><code>ctx.host</code></li><li><code>ctx.hostname</code></li><li><code>ctx.fresh</code></li><li><code>ctx.stale</code></li><li><code>ctx.socket</code></li><li><code>ctx.protocol</code></li><li><code>ctx.secure</code></li><li><code>ctx.ip</code></li><li><code>ctx.ips</code></li><li><code>ctx.subdomains</code></li><li><code>ctx.is()</code></li><li><code>ctx.accepts()</code></li><li><code>ctx.acceptsEncodings()</code></li><li><code>ctx.acceptsCharsets()</code></li><li><code>ctx.acceptsLanguages()</code></li><li><code>ctx.get()</code></li></ul><h2 id="response-aliases" tabindex="-1">Response aliases <a class="header-anchor" href="#response-aliases" aria-label="Permalink to &quot;Response aliases&quot;">​</a></h2><p>以下访问器和别名与 <a href="https://www.koajs.com.cn/#response" target="_blank" rel="noreferrer">Response</a> 等价：</p><ul><li><code>ctx.body</code></li><li><code>ctx.body=</code></li><li><code>ctx.status</code></li><li><code>ctx.status=</code></li><li><code>ctx.message</code></li><li><code>ctx.message=</code></li><li><code>ctx.length=</code></li><li><code>ctx.length</code></li><li><code>ctx.type=</code></li><li><code>ctx.type</code></li><li><code>ctx.headerSent</code></li><li><code>ctx.redirect()</code></li><li><code>ctx.attachment()</code></li><li><code>ctx.set()</code></li><li><code>ctx.append()</code></li><li><code>ctx.remove()</code></li><li><code>ctx.lastModified=</code></li><li><code>ctx.etag=</code></li></ul>`,52),l=[o];function c(d,n,h,p,r,k){return i(),s("div",null,l)}const u=e(t,[["render",c]]);export{g as __pageData,u as default};
