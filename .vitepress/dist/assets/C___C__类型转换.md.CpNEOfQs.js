import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BtCE5x9j.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"C++/C++类型转换.md","filePath":"C++/C++类型转换.md"}'),l={name:"C++/C++类型转换.md"},t=n(`<h2 id="隐式类型转换" tabindex="-1">隐式类型转换 <a class="header-anchor" href="#隐式类型转换" aria-label="Permalink to &quot;隐式类型转换&quot;">​</a></h2><ul><li>编译器自动完成</li><li>转换场景 <ul><li>初始化</li><li>变量赋值</li><li>计算表达式</li></ul></li><li>转换规则 <ul><li>尽量类型向上升级</li><li>尽量避免数据丢失</li></ul></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>graph BT</span></span>
<span class="line"><span></span></span>
<span class="line"><span>A(bool) --&gt;B(char)</span></span>
<span class="line"><span>B(char) --&gt;C(short int)</span></span>
<span class="line"><span>C(short int) --&gt;D(int)</span></span>
<span class="line"><span>D(int) --&gt;E(unsigned int)</span></span>
<span class="line"><span>E(unsigned int) --&gt;F(long)</span></span>
<span class="line"><span>F(long) --&gt;G(unsigned)</span></span>
<span class="line"><span>G(unsigned) --&gt;H(long long)</span></span>
<span class="line"><span>H(long long) --&gt;I(float)</span></span>
<span class="line"><span>I(float) --&gt;J(double)</span></span>
<span class="line"><span>J(double) --&gt; K(long double)</span></span></code></pre></div><h2 id="显式类型转换" tabindex="-1">显式类型转换 <a class="header-anchor" href="#显式类型转换" aria-label="Permalink to &quot;显式类型转换&quot;">​</a></h2><h4 id="c风格类型转换" tabindex="-1">C风格类型转换 <a class="header-anchor" href="#c风格类型转换" aria-label="Permalink to &quot;C风格类型转换&quot;">​</a></h4><p><code>float f = (float)3 / 4;</code></p><p><code>float f = float(3) / 4;</code>（C++新写法）</p><ul><li><p>语义较多，能力太强</p></li><li><p>容易误用，不推荐</p></li></ul><h2 id="更安全的类型转换" tabindex="-1">更安全的类型转换 <a class="header-anchor" href="#更安全的类型转换" aria-label="Permalink to &quot;更安全的类型转换&quot;">​</a></h2><h4 id="静态类型转换" tabindex="-1">静态类型转换 <a class="header-anchor" href="#静态类型转换" aria-label="Permalink to &quot;静态类型转换&quot;">​</a></h4><ul><li><p>基本数据类型间转换</p></li><li><p>基类及子类间转换</p></li><li><p>编译时进行类型检查</p></li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">目标类型</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(源类型)</span></span></code></pre></div><p>源类型和目标类型只要有一个方向可以隐式转换，那么两个方向都可以做静态类型转换，如果不能则报错</p><h4 id="动态类型转换" tabindex="-1">动态类型转换 <a class="header-anchor" href="#动态类型转换" aria-label="Permalink to &quot;动态类型转换&quot;">​</a></h4><ul><li>向下转换 <ul><li>基类指针转换为子类指针</li><li>主要用于多态场景</li></ul></li><li>运行时类型检查 <ul><li>基类指针不指向子类对象时转为空指针</li><li>底层实现基于虚表指针，无虚函数类不能使用dynamic_cast</li></ul></li><li>static_cast <ul><li>也可以做向下转换</li><li>不具备运行时类型检查</li><li>存在风险</li></ul></li><li>也可用于引用，和指针用法类似</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">dynamic_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">目标类型</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(源类型)</span></span></code></pre></div><p>将基类类型参数转换为派生类类型，源类型和目标类型必须同是引用或指针，且目标类型和源类型之间存在继承关系，否则报错</p><h4 id="去常类型转换" tabindex="-1">去常类型转换 <a class="header-anchor" href="#去常类型转换" aria-label="Permalink to &quot;去常类型转换&quot;">​</a></h4><ul><li>const指针或引用转为非const</li><li>存在非法场景（未定义行为）</li><li>使用场景较少</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">目标类型</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(源类型)</span></span></code></pre></div><p>源类型和目标类型必须同是引用或指针，且目标类型和源类型之间只有常属性的区别，否则报错</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //const不是基本的数据类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const_cast&lt;int*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const_cast&lt;const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p1);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//用来加const和去const</span></span></code></pre></div><h4 id="重解释类型转换" tabindex="-1">重解释类型转换 <a class="header-anchor" href="#重解释类型转换" aria-label="Permalink to &quot;重解释类型转换&quot;">​</a></h4><ul><li>不同类型指针之间、指针与整型间强转</li><li>编译器不对指向对象的类型做任何检查</li><li>谨慎使用</li></ul><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">reinterpret_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">目标类型</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(源类型)</span></span></code></pre></div><p>源类型和目标类型必须同是指针，或者一个指针一个整数，否则报错</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> reinterpret_cast&lt;int*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> reinterpret_cast&lt;int*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> reinterpret_cast&lt;int&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p2);</span></span></code></pre></div><h2 id="类型转换函数" tabindex="-1">类型转换函数 <a class="header-anchor" href="#类型转换函数" aria-label="Permalink to &quot;类型转换函数&quot;">​</a></h2><ul><li>类可以提供自定义的类型转换函数</li><li>类似操作符重载</li><li>可以用explicit修饰，避免隐式转换</li><li>一般使用const修饰</li></ul><h2 id="upcasting-and-downcasting-向上-向下转型" tabindex="-1">Upcasting and Downcasting (向上/向下转型) <a class="header-anchor" href="#upcasting-and-downcasting-向上-向下转型" aria-label="Permalink to &quot;Upcasting and Downcasting (向上/向下转型)&quot;">​</a></h2><ul><li><p>upcasting : Assigning a pointer of a derived class type to a pointer of its base class type (将派生类类型指针赋值给基类类型指针)</p></li><li><p>downcasting : Assigning a pointer of a base class type to a pointer of its derived class type. (将基类类型指针赋值给派生类类型指针)</p></li></ul><p>上转可不适用dynamic_cast而隐式转换</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GeometricObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Circle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Circle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //Correct</span></span></code></pre></div><p>下转必须显式执行</p><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> dynamic_cast&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Circle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(g);</span></span></code></pre></div>`,35),p=[t];function h(e,k,d,c,r,g){return a(),i("div",null,p)}const y=s(l,[["render",h]]);export{E as __pageData,y as default};
