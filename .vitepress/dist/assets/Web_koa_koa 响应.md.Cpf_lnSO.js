import{_ as s,c as i,o as e,a4 as a}from"./chunks/framework.BtCE5x9j.js";const u=JSON.parse('{"title":"Response","description":"","frontmatter":{},"headers":[],"relativePath":"Web/koa/koa 响应.md","filePath":"Web/koa/koa 响应.md"}'),t={name:"Web/koa/koa 响应.md"},n=a(`<h1 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;Response&quot;">​</a></h1><p>Koa <code>Response</code> 对象是对 node 的 response 进一步抽象和封装，提供了日常 HTTP 服务器开发中一些有用的功能。</p><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="response-header" tabindex="-1">response.header <a class="header-anchor" href="#response-header" aria-label="Permalink to &quot;response.header&quot;">​</a></h3><p>Response header 对象。</p><h3 id="response-headers" tabindex="-1">response.headers <a class="header-anchor" href="#response-headers" aria-label="Permalink to &quot;response.headers&quot;">​</a></h3><p>Response header 对象。等价于 <code>response.header</code>.</p><h3 id="response-socket" tabindex="-1">response.socket <a class="header-anchor" href="#response-socket" aria-label="Permalink to &quot;response.socket&quot;">​</a></h3><p>Request socket.</p><h3 id="response-status" tabindex="-1">response.status <a class="header-anchor" href="#response-status" aria-label="Permalink to &quot;response.status&quot;">​</a></h3><p>获取响应状态。 默认情况下，<code>response.status</code>设置为404，而不像node&#39;s <code>res.statusCode</code>默认为200。</p><h3 id="response-status-1" tabindex="-1">response.status= <a class="header-anchor" href="#response-status-1" aria-label="Permalink to &quot;response.status=&quot;">​</a></h3><p>通过数字设置响应状态:</p><ul><li>100 &quot;continue&quot;</li><li>101 &quot;switching protocols&quot;</li><li>102 &quot;processing&quot;</li><li>200 &quot;ok&quot;</li><li>201 &quot;created&quot;</li><li>202 &quot;accepted&quot;</li><li>203 &quot;non-authoritative information&quot;</li><li>204 &quot;no content&quot;</li><li>205 &quot;reset content&quot;</li><li>206 &quot;partial content&quot;</li><li>207 &quot;multi-status&quot;</li><li>208 &quot;already reported&quot;</li><li>226 &quot;im used&quot;</li><li>300 &quot;multiple choices&quot;</li><li>301 &quot;moved permanently&quot;</li><li>302 &quot;found&quot;</li><li>303 &quot;see other&quot;</li><li>304 &quot;not modified&quot;</li><li>305 &quot;use proxy&quot;</li><li>307 &quot;temporary redirect&quot;</li><li>308 &quot;permanent redirect&quot;</li><li>400 &quot;bad request&quot;</li><li>401 &quot;unauthorized&quot;</li><li>402 &quot;payment required&quot;</li><li>403 &quot;forbidden&quot;</li><li>404 &quot;not found&quot;</li><li>405 &quot;method not allowed&quot;</li><li>406 &quot;not acceptable&quot;</li><li>407 &quot;proxy authentication required&quot;</li><li>408 &quot;request timeout&quot;</li><li>409 &quot;conflict&quot;</li><li>410 &quot;gone&quot;</li><li>411 &quot;length required&quot;</li><li>412 &quot;precondition failed&quot;</li><li>413 &quot;payload too large&quot;</li><li>414 &quot;uri too long&quot;</li><li>415 &quot;unsupported media type&quot;</li><li>416 &quot;range not satisfiable&quot;</li><li>417 &quot;expectation failed&quot;</li><li>418 &quot;I&#39;m a teapot&quot;</li><li>422 &quot;unprocessable entity&quot;</li><li>423 &quot;locked&quot;</li><li>424 &quot;failed dependency&quot;</li><li>426 &quot;upgrade required&quot;</li><li>428 &quot;precondition required&quot;</li><li>429 &quot;too many requests&quot;</li><li>431 &quot;request header fields too large&quot;</li><li>500 &quot;internal server error&quot;</li><li>501 &quot;not implemented&quot;</li><li>502 &quot;bad gateway&quot;</li><li>503 &quot;service unavailable&quot;</li><li>504 &quot;gateway timeout&quot;</li><li>505 &quot;http version not supported&quot;</li><li>506 &quot;variant also negotiates&quot;</li><li>507 &quot;insufficient storage&quot;</li><li>508 &quot;loop detected&quot;</li><li>510 &quot;not extended&quot;</li><li>511 &quot;network authentication required&quot;</li></ul><p><strong>注意</strong>：不用担心记不住这些字符串，如果您设置错误，会有异常抛出，并列出该状态码表来帮助您进行更正。</p><h3 id="response-message" tabindex="-1">response.message <a class="header-anchor" href="#response-message" aria-label="Permalink to &quot;response.message&quot;">​</a></h3><p>获取响应状态消息。默认情况下, <code>response.message</code>关联<code>response.status</code>。</p><h3 id="response-message-1" tabindex="-1">response.message= <a class="header-anchor" href="#response-message-1" aria-label="Permalink to &quot;response.message=&quot;">​</a></h3><p>将响应状态消息设置为给定值。</p><h3 id="response-length" tabindex="-1">response.length= <a class="header-anchor" href="#response-length" aria-label="Permalink to &quot;response.length=&quot;">​</a></h3><p>将响应Content-Length设置为给定值。</p><h3 id="response-length-1" tabindex="-1">response.length <a class="header-anchor" href="#response-length-1" aria-label="Permalink to &quot;response.length&quot;">​</a></h3><p>如果 Content-Length 作为数值存在，或者可以通过 <code>ctx.body</code> 来进行计算，则返回相应数值，否则返回 <code>undefined</code>。</p><h3 id="response-body" tabindex="-1">response.body <a class="header-anchor" href="#response-body" aria-label="Permalink to &quot;response.body&quot;">​</a></h3><p>获取响应体。</p><h3 id="response-body-1" tabindex="-1">response.body= <a class="header-anchor" href="#response-body-1" aria-label="Permalink to &quot;response.body=&quot;">​</a></h3><p>设置响应体为如下值:</p><ul><li><code>string</code> written</li><li><code>Buffer</code> written</li><li><code>Stream</code> piped</li><li><code>Object</code> || <code>Array</code> json-stringified</li><li><code>null</code> no content response</li></ul><p>如果 <code>res.status</code> 没有赋值，Koa会自动设置为 <code>200</code> 或 <code>204</code>。</p><h4 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to &quot;String&quot;">​</a></h4><p>Content-Type 默认为 text/html 或者 text/plain，两种默认 charset 均为 utf-8。 Content-Length 同时会被设置。</p><h4 id="buffer" tabindex="-1">Buffer <a class="header-anchor" href="#buffer" aria-label="Permalink to &quot;Buffer&quot;">​</a></h4><p>Content-Type 默认为 application/octet-stream，Content-Length同时被设置。</p><h4 id="stream" tabindex="-1">Stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;Stream&quot;">​</a></h4><p>Content-Type 默认为 application/octet-stream。</p><p>当stream被设置为响应体时， <code>.onerror</code>将作为监听器自动添加到错误事件中以捕获任何错误。此外，每当请求被关闭（甚至更早）时，stream都将被销毁。如果不想要这两个功能，请不要直接将stream设置为响应体。例如，当将响应体设置为代理中的HTTP stream时，会破坏底层连接。</p><p>请查阅: <a href="https://github.com/koajs/koa/pull/612" target="_blank" rel="noreferrer">fix: should not destroy streams by dead-horse · Pull Request #612 · koajs/koa · GitHub</a>来获取更多信息。</p><p>以下是stream error处理的示例，并且不会自动销毁stream：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PassThrough</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).PassThrough;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someHTTPStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ctx.onerror).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PassThrough</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="object" tabindex="-1">Object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;Object&quot;">​</a></h4><p>Content-Type默认为application/json。 这包括普通对象<code>{ foo: &#39;bar&#39; }</code>和数组[&#39;foo&#39;, &#39;bar&#39;]。</p><h3 id="response-get-field" tabindex="-1">response.get(field) <a class="header-anchor" href="#response-get-field" aria-label="Permalink to &quot;response.get(field)&quot;">​</a></h3><p>获取 response header 中字段值，field 不区分大小写。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> etag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ETag&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="response-set-field-value" tabindex="-1">response.set(field, value) <a class="header-anchor" href="#response-set-field-value" aria-label="Permalink to &quot;response.set(field, value)&quot;">​</a></h3><p>设置 response header 字段 <code>field</code> 的值为 <code>value</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cache-Control&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;no-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="response-append-field-value" tabindex="-1">response.append(field, value) <a class="header-anchor" href="#response-append-field-value" aria-label="Permalink to &quot;response.append(field, value)&quot;">​</a></h3><p>添加额外的字段<code>field</code> 的值为 <code>val</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Link&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&lt;http://127.0.0.1/&gt;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="response-set-fields" tabindex="-1">response.set(fields) <a class="header-anchor" href="#response-set-fields" aria-label="Permalink to &quot;response.set(fields)&quot;">​</a></h3><p>使用对象同时设置 response header 中多个字段的值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;Etag&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1234&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;Last-Modified&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="response-remove-field" tabindex="-1">response.remove(field) <a class="header-anchor" href="#response-remove-field" aria-label="Permalink to &quot;response.remove(field)&quot;">​</a></h3><p>移除 response header 中字段 <code>filed</code>。</p><h3 id="response-type" tabindex="-1">response.type <a class="header-anchor" href="#response-type" aria-label="Permalink to &quot;response.type&quot;">​</a></h3><p>获取 response <code>Content-Type</code>，不包含像&quot;charset&quot;这样的参数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ct</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.type;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// =&gt; &quot;image/png&quot;</span></span></code></pre></div><h3 id="response-type-1" tabindex="-1">response.type= <a class="header-anchor" href="#response-type-1" aria-label="Permalink to &quot;response.type=&quot;">​</a></h3><p>通过 mime 类型的字符串或者文件扩展名设置 response <code>Content-Type</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;text/plain; charset=utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;image/png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>注意：当为你选择一个合适的<code>charset</code>时，例如<code>response.type = &#39;html&#39;</code>将默认为&quot;utf-8&quot;。 如果需要覆盖<code>charset</code>，请使用<code>ctx.set(&#39;Content-Type&#39;, &#39;text/html&#39;)</code>直接设置响应头字段值。</p><h3 id="response-is-types" tabindex="-1">response.is(types...) <a class="header-anchor" href="#response-is-types" aria-label="Permalink to &quot;response.is(types...)&quot;">​</a></h3><p>跟<code>ctx.request.is()</code>非常类似。用来检查响应类型是否是所提供的类型之一。这对于创建操作响应的中间件特别有用。</p><p>例如，这是一个中间件，它可以缩小除stream以外的所有HTML响应。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> minify</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html-minifier&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ctx.body;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body.pipe) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Buffer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body)) body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> minify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="response-redirect-url-alt" tabindex="-1">response.redirect(url, [alt]) <a class="header-anchor" href="#response-redirect-url-alt" aria-label="Permalink to &quot;response.redirect(url, [alt])&quot;">​</a></h3><p>执行 [302] 重定向到对应 <code>url</code>。</p><p>字符串 &quot;back&quot; 是一个特殊参数，其提供了 Referrer 支持。当没有Referrer时，使用 <code>alt</code> 或者 <code>/</code> 代替。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;back&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;back&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://google.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>如果想要修改默认的 [302] 状态，直接在重定向之前或者之后执行即可。如果要修改 body，需要在重定向之前执行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/cart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Redirecting to shopping cart&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="response-attachment-filename" tabindex="-1">response.attachment([filename]) <a class="header-anchor" href="#response-attachment-filename" aria-label="Permalink to &quot;response.attachment([filename])&quot;">​</a></h3><p>设置 &quot;attachment&quot; 的 <code>Content-Disposition</code>，用于给客户端发送信号来提示下载。filename 为可选参数，用于指定下载文件名。</p><h3 id="response-headersent" tabindex="-1">response.headerSent <a class="header-anchor" href="#response-headersent" aria-label="Permalink to &quot;response.headerSent&quot;">​</a></h3><p>检查 response header 是否已经发送，用于在发生错误时检查客户端是否被通知。</p><h3 id="response-lastmodified" tabindex="-1">response.lastModified <a class="header-anchor" href="#response-lastmodified" aria-label="Permalink to &quot;response.lastModified&quot;">​</a></h3><p>如果存在 <code>Last-Modified</code>，则以 <code>Date</code> 的形式返回。</p><h3 id="response-lastmodified-1" tabindex="-1">response.lastModified= <a class="header-anchor" href="#response-lastmodified-1" aria-label="Permalink to &quot;response.lastModified=&quot;">​</a></h3><p>以 UTC 格式设置 <code>Last-Modified</code>。您可以使用 <code>Date</code> 或 date 字符串来进行设置。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.response.lastModified </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="response-etag" tabindex="-1">response.etag= <a class="header-anchor" href="#response-etag" aria-label="Permalink to &quot;response.etag=&quot;">​</a></h3><p>设置 包含 <code>&quot;</code>s 的 ETag。注意没有对应的 <code>res.etag</code> 来获取其值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.response.etag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createHash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;md5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx.body).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hex&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="response-vary-field" tabindex="-1">response.vary(field) <a class="header-anchor" href="#response-vary-field" aria-label="Permalink to &quot;response.vary(field)&quot;">​</a></h3><p>不同于<code>field</code>.</p><h3 id="response-flushheaders" tabindex="-1">response.flushHeaders() <a class="header-anchor" href="#response-flushheaders" aria-label="Permalink to &quot;response.flushHeaders()&quot;">​</a></h3><p>刷新任何设置的响应头，并开始响应体。</p>`,88),l=[n];function h(p,o,r,k,d,c){return e(),i("div",null,l)}const g=s(t,[["render",h]]);export{u as __pageData,g as default};
