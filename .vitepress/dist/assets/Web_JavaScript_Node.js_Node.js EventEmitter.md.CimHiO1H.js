import{_ as s,c as e,o as i,a4 as a}from"./chunks/framework.BtCE5x9j.js";const g=JSON.parse('{"title":"Node.js EventEmitter","description":"","frontmatter":{},"headers":[],"relativePath":"Web/JavaScript/Node.js/Node.js EventEmitter.md","filePath":"Web/JavaScript/Node.js/Node.js EventEmitter.md"}'),t={name:"Web/JavaScript/Node.js/Node.js EventEmitter.md"},n=a(`<h1 id="node-js-eventemitter" tabindex="-1">Node.js EventEmitter <a class="header-anchor" href="#node-js-eventemitter" aria-label="Permalink to &quot;Node.js EventEmitter&quot;">​</a></h1><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p><p>Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 <code>fs.readStream</code> 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例。</p><h2 id="eventemitter-类" tabindex="-1">EventEmitter 类 <a class="header-anchor" href="#eventemitter-类" aria-label="Permalink to &quot;EventEmitter 类&quot;">​</a></h2><p>events 模块只提供了一个对象： <code>events.EventEmitter</code>。<code>EventEmitter</code>的核心就是事件触发与事件监听器功能的封装。</p><p>你可以通过<code>require(&quot;events&quot;);</code>来访问该模块</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 引入 events 模块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> events </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;events&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建 eventEmitter 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eventEmitter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> events.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">EventEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="addlistener-event-listener" tabindex="-1">addListener(event, listener) <a class="header-anchor" href="#addlistener-event-listener" aria-label="Permalink to &quot;addListener(event, listener)&quot;">​</a></h4><p>为指定事件添加一个监听器到监听器数组的尾部。</p><h4 id="on-event-listener" tabindex="-1">on(event, listener) <a class="header-anchor" href="#on-event-listener" aria-label="Permalink to &quot;on(event, listener)&quot;">​</a></h4><p>为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;someone connected!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="once-event-listener" tabindex="-1">once(event, listener) <a class="header-anchor" href="#once-event-listener" aria-label="Permalink to &quot;once(event, listener)&quot;">​</a></h4><p>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">once</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ah, we have our first user!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="removelistener-event-listener" tabindex="-1">removeListener(event, listener) <a class="header-anchor" href="#removelistener-event-listener" aria-label="Permalink to &quot;removeListener(event, listener)&quot;">​</a></h4><p>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。</p><p>它接受两个参数，第一个是事件名称，第二个是回调函数名称。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callback</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;someone connected!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, callback);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;connection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, callback);</span></span></code></pre></div><h4 id="removealllisteners-event" tabindex="-1">removeAllListeners([event]) <a class="header-anchor" href="#removealllisteners-event" aria-label="Permalink to &quot;removeAllListeners([event])&quot;">​</a></h4><p>移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。</p><h4 id="setmaxlisteners-n" tabindex="-1">setMaxListeners(n) <a class="header-anchor" href="#setmaxlisteners-n" aria-label="Permalink to &quot;setMaxListeners(n)&quot;">​</a></h4><p>默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于改变监听器的默认限制的数量。</p><h4 id="listeners-event" tabindex="-1">listeners(event) <a class="header-anchor" href="#listeners-event" aria-label="Permalink to &quot;listeners(event)&quot;">​</a></h4><p>返回指定事件的监听器数组。</p><h4 id="emit-event-arg1-arg2" tabindex="-1">emit(event, [arg1], [arg2], [...]) <a class="header-anchor" href="#emit-event-arg1-arg2" aria-label="Permalink to &quot;emit(event, [arg1], [arg2], [...])&quot;">​</a></h4><p>发送信号，按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false。</p><h3 id="类方法" tabindex="-1">类方法 <a class="header-anchor" href="#类方法" aria-label="Permalink to &quot;类方法&quot;">​</a></h3><h4 id="listenercount-emitter-event" tabindex="-1">listenerCount(emitter, event) <a class="header-anchor" href="#listenercount-emitter-event" aria-label="Permalink to &quot;listenerCount(emitter, event)&quot;">​</a></h4><p>返回指定事件的监听器数量。</p><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><h4 id="newlistener" tabindex="-1">newListener <a class="header-anchor" href="#newlistener" aria-label="Permalink to &quot;newListener&quot;">​</a></h4><ul><li><p><strong>event</strong> - 字符串，事件名称</p></li><li><p><strong>listener</strong> - 处理事件函数</p></li></ul><p>该事件在添加新监听器时被触发。</p><h4 id="removelistener" tabindex="-1">removeListener <a class="header-anchor" href="#removelistener" aria-label="Permalink to &quot;removeListener&quot;">​</a></h4><ul><li><p><strong>event</strong> - 字符串，事件名称</p></li><li><p><strong>listener</strong> - 处理事件函数</p></li></ul><p>从指定监听器数组中删除一个监听器。需要注意的是，此操作将会改变处于被删监听器之后的那些监听器的索引。</p>`,38),l=[n];function h(r,p,k,o,d,E){return i(),e("div",null,l)}const v=s(t,[["render",h]]);export{g as __pageData,v as default};
