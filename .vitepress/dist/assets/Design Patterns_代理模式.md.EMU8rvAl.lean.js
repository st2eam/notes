import{_ as h,E as p,c as t,J as a,w as n,m as s,a as l,a4 as k,o as e}from"./chunks/framework.BtCE5x9j.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Design Patterns/代理模式.md","filePath":"Design Patterns/代理模式.md"}'),E={name:"Design Patterns/代理模式.md"},r=s("h2",{id:"代理模式-proxy-pattern",tabindex:"-1"},[l("代理模式（Proxy Pattern） "),s("a",{class:"header-anchor",href:"#代理模式-proxy-pattern","aria-label":'Permalink to "代理模式（Proxy Pattern）"'},"​")],-1),g=s("p",null,"代理模式是一种结构型设计模式， 让你能够提供对象的替代品或其占位符。 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理。",-1),d=s("img",{src:"https://refactoringguru.cn/images/patterns/diagrams/proxy/solution-zh.png?id=d0ace8ab2ec4ff78e0620c94e4ff2eda"},null,-1),y=s("p",null,"代理模式建议新建一个与原服务对象接口相同的代理类， 然后更新应用以将代理对象传递给所有原始对象客户端。 代理类接收到客户端请求后会创建实际的服务对象， 并将所有工作委派给它。",-1),c=s("p",null,"代理模式的解决方案 代理将自己伪装成数据库对象， 可在客户端或实际数据库对象不知情的情况下处理延迟初始化和缓存查询结果的工作。",-1),o=s("h3",{id:"代理模式结构",tabindex:"-1"},[l("代理模式结构 "),s("a",{class:"header-anchor",href:"#代理模式结构","aria-label":'Permalink to "代理模式结构"'},"​")],-1),F=s("img",{src:"https://refactoringguru.cn/images/patterns/diagrams/proxy/structure.png?id=f2478a82a84e1a1e512a8414bf1abd1c"},null,-1),A=k("",21);function D(m,u,C,b,B,_){const i=p("center");return e(),t("div",null,[r,g,a(i,null,{default:n(()=>[d]),_:1}),y,c,o,a(i,null,{default:n(()=>[F]),_:1}),A])}const x=h(E,[["render",D]]);export{f as __pageData,x as default};
