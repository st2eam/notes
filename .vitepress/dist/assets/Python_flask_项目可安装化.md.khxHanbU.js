import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.BtCE5x9j.js";const g=JSON.parse('{"title":"项目可安装化","description":"","frontmatter":{},"headers":[],"relativePath":"Python/flask/项目可安装化.md","filePath":"Python/flask/项目可安装化.md"}'),p={name:"Python/flask/项目可安装化.md"},l=n(`<h1 id="项目可安装化" tabindex="-1">项目可安装化 <a class="header-anchor" href="#项目可安装化" aria-label="Permalink to &quot;项目可安装化&quot;">​</a></h1><p>项目可安装化是指创建一个项目 <em>发行</em> 文件，以使用项目可以安装到其他环境， 就像在你的项目中安装 Flask 一样。这样可以使你的项目如同其他库一样进行部署， 可以使用标准的 Python 工具来管理项目。</p><p>可安装化还可以带来如下好处，这些好处在教程中可以不太明显或者初学者可能没 注意到：</p><ul><li>现在， Python 和 Flask 能够理解如何 <code>flaskr</code> 包，是因为你是在项目 文件夹中运行的。可安装化后，可以从任何地方导入项目并运行。</li><li>可以和其他包一样管理项目的依赖，即使用 <code>pip install yourproject.whl</code> 来安装项目并安装相关依赖。</li><li>测试工具可以分离测试环境和开发环境。</li></ul><blockquote><p>Note</p><p>这些内容会在随后的教程中说明，但是在以后的项目中应当以此为项目的起点。</p></blockquote><h2 id="描述项目" tabindex="-1">描述项目 <a class="header-anchor" href="#描述项目" aria-label="Permalink to &quot;描述项目&quot;">​</a></h2><p><code>setup.py</code> 文件描述项目及其从属的文件。</p><p><code>setup.py</code></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> setuptools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> find_packages, setup</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">setup(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;flaskr&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1.0.0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    packages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">find_packages(),</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    include_package_data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    zip_safe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    install_requires</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;flask&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>packages</code> 告诉 Python 包所包括的文件夹（及其所包含的 Python 文件）。 <code>find_packages()</code> 自动找到这些文件夹，这样就不用手动写出来。 为了包含其他文件夹，如静态文件和模板文件所在的文件夹，需要设置 <code>include_package_data</code> 。 Python 还需要一个名为 <code>MANIFEST.in</code> 文件来说明这些文件有哪些。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">include flaskr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">schema.sql</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graft flaskr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">static</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graft flaskr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">templates</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">global-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exclude </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.pyc</span></span></code></pre></div><p>这告诉 Python 复制所有 <code>static</code> 和 <code>templates</code> 文件夹中的文件， <code>schema.sql</code> 文件，但是排除所有字节文件。</p><h2 id="安装项目" tabindex="-1">安装项目 <a class="header-anchor" href="#安装项目" aria-label="Permalink to &quot;安装项目&quot;">​</a></h2><p>使用 <code>pip</code> 在虚拟环境中安装项目。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ pip install -e .</span></span></code></pre></div><p>这个命令告诉 pip 在当前文件夹中寻找 <code>setup.py</code> 并在 <em>编辑</em> 或 <em>开发</em> 模式下安装。编辑模式是指当改变本地代码后，只需要重新项目。比如改变了项目 依赖之类的元数据的情况下。</p><p>可以通过 <code>pip list</code> 来查看项目的安装情况。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        Version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   Location</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--------------</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ---------</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ----------------------------------</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          6.7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Flask</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flaskr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     /home/user/Projects/flask-tutorial</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">itsdangerous</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   0.24</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Jinja2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         2.10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MarkupSafe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     1.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            9.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setuptools</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     39.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Werkzeug</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       0.14</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wheel</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          0.30</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.0</span></span></code></pre></div><p>至此，没有改变项目运行的方式， <code>FLASK_APP</code> 还是被设置为 <code>flaskr</code> ， 还是使用 <code>flask run</code> 运行应用。不同的是可以在任何地方运行应用，而不仅仅 是在 <code>flask-tutorial</code> 目录下。</p>`,19),h=[l];function e(t,k,d,r,c,o){return a(),i("div",null,h)}const y=s(p,[["render",e]]);export{g as __pageData,y as default};
